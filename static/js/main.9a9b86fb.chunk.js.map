{"version":3,"sources":["lib/PlottingUtils.js","lib/TempChart.jsx","lib/TempChartLeftPanel.jsx","lib/TempChartYAxis.jsx","lib/TempChartRedLine.jsx","lib/PlotContainers/PlotContainers.js","lib/HoverInteractionBox.js","lib/DynamicDateYAxisTwoLevelPanel.js","lib/DateXAxis.js","lib/index.js","lib/TempChartBundle.jsx","index.js"],"names":["toDomYCoord_Linear","height","minY","maxY","dataY","toDomXCoord_Linear","width","minX","maxX","dataX","TempChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","drawTempChart","ctx","_this$props","data","fromBackgroundFillData","clearRect","canvasW","canvasH","i","fillStyle","beginPath","fromBackGroundDomY","toBackGroundDomY","rect","fill","map","d","domY","circle","domX","Array","minDomY","maxDomY","Math","abs","roundRect","grd","getCircle","drawImage","tempChartCanvas","refs","tempChartCtx","getContext","createLinearGradient","addColorStop","x0","y0","x1","y1","r","color","w","h","moveTo","quadraticCurveTo","lineTo","closePath","greenCircle","canvas","document","createElement","arc","PI","blackCircle","redCircle","react_default","a","className","ref","style","zIndex","PureComponent","TempChartLeftPanel","drawMeter","styles","tempChartLeftPanel","panelHeight","panelWidth","backgroundColor","tempChartLabel","position","top","left","fontWeight","TempChartYAxis","drawYAxis","labels","lineWidth","stroke","font","textBaseline","length","posDomY","fillText","tempChartYAxisCanvas","tempChartYAxisCtx","n","parseInt","TempChartRedLine","drawRedLine","time","strokeStyle","redLineCanvas","redLineCtx","PlotContainer","_Component","_getPrototypeOf2","_len","arguments","args","_key","apply","concat","generateGridLayoutStyle","memoize_one","leftWidth","plotWidth","rightWidth","topHeight","plotHeight","bottomHeight","display","gridGap","gridTemplateColumns","gridTemplateRows","inherits","createClass","key","value","children","Component","PlotSubContainer","React","Children","child","DynamicDateYAxisTwoLevelPanel","rest","objectWithoutProperties","label","createLabel","DynamicDateYAxisTwoLevelPanel_Panel","assign","minT","Date","maxT","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","format","Panel","createRef","_this$props2","draw","_this$props3","current","fillRect","textAlign","PARIMARY_CATEGORY_WIDTH","DateXAxis","objectSpread","_this2","draw_memo","validFromDiffX","validToDiffX","rangeMinX","rangeMaxX","memo","diffX","_generateDateGrids","generateDateGrids","grids","gridLabels","getGridLabels","labelBitmaps","text","createTextBitmaps","startIndex","max","bisect_right","endIndex","min","bisect_left","domXs","slice","x","bitmapPlot","ticPlot","minT_Year","maxT_Year","prevMonth","minT_Month","maxT_Month","minT_Date","maxT_Date","minT_Hour","maxT_Hour","minT_Minute","maxT_Minute","minT_Second","maxT_Second","measureText","bitmaps","bitmap","round","y","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","TempChartBundle","getDaysBetweenDates","d0","d1","setHours","dtWindow","filteredData","filter","o","timeArr","timeSet","Set","has","push","add","combineData","combNum","curCombinedObj","combinedData","curCombNum","curMinTemp","curMaxTemp","leftPanelGradShadow","opacity","backgroundImage","filterDataToDtWindow","tryToCombineData","PlotContainers_PlotContainer","PlotContainers_PlotSubContainer","lib_DynamicDateYAxisTwoLevelPanel","lib_DateXAxis","lib_TempChartLeftPanel","lib_TempChartYAxis","lib_TempChart","lib_TempChartRedLine","App","handleSubmit","e","preventDefault","jsonStr","replace","s","substring","json","JSON","parse","state","setState","toConsumableArray","dataTypeToColorDict","MEDS","FLUSHES","TPN","FEEDS","lol434ra","xbo4334x","tempData","meds","handleRemoveBtnCLick","bind","assertThisInitialized","self","firstTime","setInterval","simulateDataChange","name","type","newMaxTime","newTemp","temp","floor","random","newData","console","log","_this$state","Fragment","onSubmit","fontSize","placeholder","element","onClick","lib","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.9a9b86fb.chunk.js","sourcesContent":["//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import React, { PureComponent } from \"react\";\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n    fromDomXCoord_Linear\n} from \"./PlottingUtils\"\n\nclass TempChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.tempChartCanvas = this.refs.tempChartCanvas\n        this.tempChartCtx = this.tempChartCanvas.getContext(\"2d\")\n        this.drawTempChart(this.tempChartCtx)\n\n        this.grd = this.tempChartCtx.createLinearGradient(0, 0, 0, this.canvasH);\n        this.grd.addColorStop(0.168, 'rgba(255, 86, 86, 1.000)');\n        this.grd.addColorStop(0.304, 'rgba(170, 255, 170, 1.000)');\n        this.grd.addColorStop(0.452, 'rgba(86, 170, 255, 1.000)');\n    }\n\n    componentDidUpdate() {\n        this.drawTempChart(this.tempChartCtx)\n    }\n\n    roundRect(ctx, x0, y0, x1, y1, r, color) {\n        var w = x1 - x0;\n        var h = y1 - y0;\n        if (r > w / 2) r = w / 2;\n        if (r > h / 2) r = h / 2;\n        ctx.beginPath();\n        ctx.moveTo(x1 - r, y0);\n        ctx.quadraticCurveTo(x1, y0, x1, y0 + r);\n        ctx.lineTo(x1, y1 - r);\n        ctx.quadraticCurveTo(x1, y1, x1 - r, y1);\n        ctx.lineTo(x0 + r, y1);\n        ctx.quadraticCurveTo(x0, y1, x0, y1 - r);\n        ctx.lineTo(x0, y0 + r);\n        ctx.quadraticCurveTo(x0, y0, x0 + r, y0);\n        ctx.closePath();\n        ctx.fillStyle = color;\n        ctx.fill();\n    }\n\n    drawTempChart = (ctx) => {\n        let { minX, maxX, minY, maxY, data } = this.props\n        let fromBackgroundFillData = 40\n\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH)\n\n        for (let i = 0; i < 5; i++) {\n            let fillStyle\n            if (fromBackgroundFillData % 10 !== 0) {\n                fillStyle = 'white'\n            } else {\n                fillStyle = '#fff3e4'\n            }\n            ctx.beginPath()\n            ctx.fillStyle = fillStyle\n            let fromBackGroundDomY = toDomYCoord_Linear(this.canvasH, 18, 43, fromBackgroundFillData)\n            let toBackGroundDomY = toDomYCoord_Linear(this.canvasH, 18, 43, fromBackgroundFillData - 5)\n            ctx.rect(0, fromBackGroundDomY, this.canvasW, toBackGroundDomY - fromBackGroundDomY)\n            fromBackgroundFillData -= 5\n            ctx.fill()\n        }\n\n        data.map(d => {\n            let domY, domX = toDomXCoord_Linear(this.canvasW, minX / 1000, maxX / 1000, d[\"time\"])\n\n            ctx.beginPath()\n\n            let circle\n            if (d[\"temp\"] instanceof Array) {\n                let minDomY = toDomYCoord_Linear(this.canvasH, 18, 43, d[\"temp\"][0])\n                let maxDomY = toDomYCoord_Linear(this.canvasH, 18, 43, d[\"temp\"][1])\n                let diff = Math.abs(maxDomY - minDomY)\n\n                if (diff < 9) {\n                    this.roundRect(ctx, domX - 4, maxDomY - 4, domX + 4, minDomY + 4, 20, this.grd)\n                } else {\n                    this.roundRect(ctx, domX - 4, maxDomY, domX + 4, minDomY, 20, this.grd)\n                }\n\n            } else {\n                domY = toDomYCoord_Linear(this.canvasH, 18, 43, d[\"temp\"])\n\n                if (d[\"temp\"] < 35) {\n                    circle = this.getCircle(\"black\");\n                } else if (d[\"temp\"] > 37) {\n                    circle = this.getCircle(\"red\");\n                } else {\n                    circle = this.getCircle(\"green\");\n                }\n\n                ctx.drawImage(circle, domX - circle.width / 2, domY - circle.height / 2);\n            }\n        })\n    }\n\n    getCircle(color) {\n        if (color === \"green\") {\n            if (!this.greenCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#4cb447'\n                ctx.fill();\n                this.greenCircle = canvas;\n            }\n            return this.greenCircle;\n        } else if (color === \"black\") {\n            if (!this.blackCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#727272'\n                ctx.fill();\n                this.blackCircle = canvas;\n            }\n            return this.blackCircle;\n        } else {\n            if (!this.redCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#cc7766'\n                ctx.fill();\n                this.redCircle = canvas;\n            }\n            return this.redCircle;\n        }\n    }\n\n    render() {\n        const styles = {\n            tempChartCanvas: { zIndex: -1 }\n        }\n        return (\n            <canvas\n                className=\"temp-chart-canvas\"\n                ref=\"tempChartCanvas\"\n                width={this.canvasW}\n                height={this.canvasH}\n                style={styles.tempChartCanvas}\n            />\n        )\n    }\n}\n\nexport default TempChart","import React, { PureComponent } from \"react\";\n\nclass TempChartLeftPanel extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n    }\n\n    componentDidMount() {\n        // this.meterCanvas = this.refs.meterCanvas\n        // this.meterCtx = this.meterCanvas.getContext(\"2d\")\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    drawMeter = (ctx) => {\n    }\n\n    render() {\n        let { panelHeight, panelWidth } = this.props\n        const styles = {\n            tempChartLeftPanel: {\n                height: panelHeight + \"px\",\n                width: panelWidth + \"px\",\n                backgroundColor: \"#fffcec\"\n            },\n            tempChartLabel: {\n                position: \"absolute\",\n                top: \"45%\",\n                left: \"10%\",\n                color: '#373c62',\n                fontWeight: '800'\n            }\n        }\n        return (\n            <div className=\"temp-chart-left-panel\"\n                style={styles.tempChartLeftPanel}>\n                <div className=\"temp-chart-label\"\n                    style={styles.tempChartLabel}> Temperature ({\"\\u00B0\"}C) </div>\n            </div>\n        )\n    }\n}\n\nexport default TempChartLeftPanel","import React, { PureComponent } from \"react\";\n\nclass TempChartYAxis extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n    }\n\n    componentDidMount() {\n        this.tempChartYAxisCanvas = this.refs.tempChartYAxisCanvas\n        this.tempChartYAxisCtx = this.tempChartYAxisCanvas.getContext(\"2d\")\n        this.drawYAxis(this.tempChartYAxisCtx);\n    }\n\n    componentDidUpdate() {\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n        this.drawYAxis(this.tempChartYAxisCtx);\n    }\n\n    toDomYCoord_Linear = (height, minY, maxY, dataY) => {\n        return height - (dataY - minY) / ((maxY - minY) / height);\n    }\n\n    drawYAxis = (ctx) => {\n        let labels = [20, 30, 40]\n        // clear canvas\n        ctx.canvas.width = ctx.canvas.width\n\n        // draw the y-axis line\n        ctx.lineWidth = 3\n        ctx.moveTo(this.canvasW, 5)\n        ctx.lineTo(this.canvasW, this.canvasH - 5)\n        ctx.stroke()\n\n        // label styling\n        ctx.font = \"600 14px MuseoSans Sans\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = '#373c62'\n\n        for (let i = 0; i < labels.length; i++) {\n            let posDomY = this.toDomYCoord_Linear(this.canvasH, 18, 43, labels[i])\n            // ctx.moveTo(this.canvasW - 10, posDomY)\n            // ctx.lineTo(this.canvasW, posDomY)\n            ctx.fillText(labels[i], this.canvasW - 25, posDomY)\n        }\n        ctx.stroke()\n    }\n\n    roundToNearestTenth(n) {\n        return (parseInt(n / 10, 10) + 1) * 10;\n    }\n\n    render() {\n        return (\n            <canvas\n                className=\"temp-chart-y-axis\"\n                ref=\"tempChartYAxisCanvas\"\n                style={{ position: \"absolute\" }}\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n\n        )\n    }\n}\n\nexport default TempChartYAxis","import React, { PureComponent } from \"react\";\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n    fromDomXCoord_Linear\n} from \"./PlottingUtils\"\n\nclass TempChartRedLine extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.redLineCanvas = this.refs.redLineCanvas\n        this.redLineCtx = this.redLineCanvas.getContext(\"2d\")\n        this.drawRedLine(this.redLineCtx)\n    }\n\n    componentDidUpdate() {\n        this.drawRedLine(this.redLineCtx)\n    }\n\n    drawRedLine = (ctx) => {\n        // clear canvas\n        ctx.canvas.width = ctx.canvas.width\n\n        let { time, minX, maxX } = this.props\n        let domX = toDomXCoord_Linear(this.canvasW, minX / 1000, maxX / 1000, time)\n        ctx.strokeStyle = 'red'\n        // draw the red line\n        ctx.lineWidth = 5\n        ctx.moveTo(domX, 5)\n        ctx.lineTo(domX, this.canvasH - 5)\n        ctx.stroke()\n    }\n\n    render() {\n        // let minXInSecs = minX / 1000, maxXInSecs = maxX / 1000\n        return (\n            <canvas\n                className=\"redline-canvas\"\n                ref=\"redLineCanvas\"\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n        )\n    }\n}\n\nexport default TempChartRedLine","import React, {Component} from \"react\";\nimport {memoize_one} from \"memoize\";\nimport \"./PlotContainers.css\";\n\nexport class PlotContainer extends Component{\n  render(){\n    let { children,width,height,\n          leftWidth,plotWidth,rightWidth,\n          topHeight,plotHeight,bottomHeight} = this.props;\n    let style = this.generateGridLayoutStyle( width,height,\n                                              leftWidth,plotWidth,rightWidth,\n                                              topHeight,plotHeight,bottomHeight);\n    return (\n      <div style={style} className=\"PlotContainers-positionRelative\">\n        {children}\n      </div>\n    )\n  }\n  \n  generateGridLayoutStyle = memoize_one((width,height,\n                          leftWidth,plotWidth,rightWidth,\n                          topHeight,plotHeight,bottomHeight)=>{\n    let style = { display:\"grid\",\n                  height:height,\n                  width:width,\n                  gridGap:0,\n                  gridTemplateColumns:`${leftWidth}px ${plotWidth}px ${rightWidth}px`,\n                  gridTemplateRows:`${topHeight}px ${plotHeight}px ${bottomHeight}px`\n                  };\n    return style;\n  })\n}\n\nexport const PlotSubContainer = (props)=>{\n  return (\n    <div className=\"PlotContainers-positionRelative\">\n      { props.children ? \n        React.Children.map(props.children,(child)=>\n          <div className=\"PlotContainers-positionAbsolute\">\n            {child}\n          </div>) :\n        null\n        }\n    </div>\n  );\n}\n\n","import React, { PureComponent } from 'react';\n\nclass HoverInteractionBox extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = {\n            x: undefined,\n            y: undefined,\n            timestamp: undefined,\n            toolTipX: undefined,\n            toolTipY: undefined,\n            isMouseOver: undefined\n        };\n    }\n\n    render() {\n        let { x, y, timestamp, toolTipX, toolTipY, isMouseOver } = this.state;\n        return (\n\n            <div\n                className={\"hovering-box\"}\n                ref={this.ref}\n                style={this.props.style}\n                onMouseDown={console.log}\n                onMouseMove={this.handleMouseMove}\n                onMouseOut={this.handleMouseOut}\n            >\n                {this.props.render({ x, y, timestamp, toolTipX, toolTipY, isMouseOver })}\n            </div>\n        );\n    }\n\n    fromDomYCoord_Linear = (height, minY, maxY, domY) => {\n        return (height - domY) * ((maxY - minY) / height) + minY;\n    }\n\n    fromDomXCoord_Linear = (width, minX, maxX, domX) => {\n        return domX * ((maxX - minX) / width) + minX;\n    }\n\n    handleMouseMove = (ev) => {\n        let bounds = this.ref.current.getBoundingClientRect();\n        let domX = ev.clientX - bounds.left;\n        let domY = ev.clientY - bounds.top;\n        let timestamp = ev.timeStamp;\n        this.setState({ x: domX, y: domY, timestamp: timestamp, toolTipX: ev.clientX, toolTipY: ev.clientY, isMouseOver: true });\n        // hoveringHandler({ domX, domY, timestamp });\n    }\n\n    handleMouseOut = (ev) => {\n        // let { mouseOutHandler } = this.props;\n        // if (!mouseOutHandler) {\n        //     return;\n        // }\n        // let bounds = this.ref.current.getBoundingClientRect();\n        // let domX = ev.clientX - bounds.left;\n        // let domY = ev.clientY - bounds.top;\n        let timestamp = ev.timeStamp;\n        // mouseOutHandler({ domX, domY, timestamp });\n        this.setState({ ...this.state, timestamp: timestamp, isMouseOver: false });\n    }\n}\n\nexport default HoverInteractionBox;","import React, { PureComponent } from \"react\";\nimport { format } from \"date-fns\";\n\nclass DynamicDateYAxisTwoLevelPanel extends PureComponent {\n  render() {\n    let { minX, maxX,\n      height, width,\n      ...rest } = this.props;\n    let label = this.createLabel(minX, maxX);\n    return (\n      <Panel label={label}\n        width={width} height={height} {...rest}\n      />\n    );\n  }\n\n  createLabel(minX, maxX) {\n    let minT = new Date(minX);\n    let maxT = new Date(maxX);\n    if (minT.getFullYear() === maxT.getFullYear()) {\n      if (minT.getMonth() === maxT.getMonth()) {\n        if (minT.getDate() === maxT.getDate()) {\n          if (minT.getHours() === maxT.getHours()) {\n            if (minT.getMinutes() === maxT.getMinutes()) {\n              if (minT.getSeconds() === maxT.getSeconds()) {\n                return format(minT, \"YYYY/MMM/DD HH:mm:ss\")\n              }\n              return format(minT, \"YYYY/MMM/DD HH:mm\")\n            }\n            return format(minT, \"YYYY/MMM/DD HH\")\n          }\n          return format(minT, \"YYYY/MMM/DD\")\n        }\n        return format(minT, \"YYYY/MMM\")\n      }\n      return format(minT, \"YYYY\")\n    }\n    return \"Time\";\n  }\n}\n\nconst PARIMARY_CATEGORY_WIDTH = 30;\nconst PRIMARY_CATEGORY_COLOR = \"lightgrey\";\nconst SECONDARY_CATEGORY_COLOR = \"#fedda7\";\n\nclass Panel extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    let { label,\n      height, width,\n      ...rest } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} {...rest}></canvas>\n    );\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { label, width, height } = this.props;\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, width, height);\n    //\n    ctx.fillStyle = PRIMARY_CATEGORY_COLOR;\n    ctx.fillRect(0, 0, PARIMARY_CATEGORY_WIDTH, height);\n    //\n    ctx.fillStyle = SECONDARY_CATEGORY_COLOR;\n    ctx.fillRect(PARIMARY_CATEGORY_WIDTH, 0, width - PARIMARY_CATEGORY_WIDTH, height);\n    //\n    ctx.fillStyle = \"black\";\n    ctx.font = \"italic 700 12px MuseoSans\";\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"left\";\n    ctx.fillText(label, width - PARIMARY_CATEGORY_WIDTH * 2 - 10, height / 2);\n  }\n}\n\nexport default DynamicDateYAxisTwoLevelPanel;\n","import React, { PureComponent } from \"react\";\nimport { bisect_left, bisect_right } from \"bisect\";\nimport { toDomXCoord_Linear, generateDateGrids } from \"plot-utils\";\nimport { format } from \"date-fns\";\n\nclass DateXAxis extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    let { minX, maxX,\n      width, height,\n      style,\n      ...rest } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height}\n        style={{ backgroundColor: \"#fff7e4\", ...style }}\n        {...rest}\n      >\n      </canvas>\n    );\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minX, maxX,\n      width, height,\n      ...rest } = this.props;\n    this.draw_memo = this.draw_memo || { validFromDiffX: 0, validToDiffX: -1, rangeMinX: 0, rangeMaxX: -1 };\n    let memo = this.draw_memo;\n    let diffX = maxX - minX;\n    // Generate grids, labels and bitmaps in cache\n    if (memo.validFromDiffX > diffX ||\n      diffX > memo.validToDiffX ||\n      memo.rangeMinX > minX ||\n      maxX > memo.rangeMaxX\n    ) {\n      memo.rangeMinX = minX - 10 * diffX;\n      memo.rangeMaxX = maxX + 10 * diffX;\n      let { grids, validFromDiffX, validToDiffX } = generateDateGrids(minX, maxX, memo.rangeMinX, memo.rangeMaxX);\n      memo.validFromDiffX = validFromDiffX;\n      memo.validToDiffX = validToDiffX;\n      memo.grids = grids;\n      let gridLabels = this.getGridLabels(minX, maxX, grids);\n      memo.labelBitmaps = gridLabels.map((text) => this.createTextBitmaps(text));\n    }\n    // Filter\n    let startIndex = Math.max(0, bisect_right(memo.grids, minX));\n    let endIndex = Math.min(memo.grids.length - 1, bisect_left(memo.grids, maxX));\n\n    let domXs = memo.grids.slice(startIndex, endIndex + 1).map((x) => toDomXCoord_Linear(width, minX, maxX, x));\n    let labelBitmaps = memo.labelBitmaps.slice(startIndex, endIndex + 1);\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, width, height);\n    this.bitmapPlot(ctx, width, height, domXs, labelBitmaps);\n    this.ticPlot(ctx, width, height, domXs);\n  }\n\n  getGridLabels(minX, maxX, grids) {\n    let minT = new Date(minX);\n    let maxT = new Date(maxX);\n    let minT_Year = minT.getFullYear();\n    let maxT_Year = maxT.getFullYear();\n    if (minT_Year === maxT_Year) {\n      let minT_Month = minT.getMonth();\n      let maxT_Month = maxT.getMonth();\n      if (minT_Month === maxT_Month) {\n        let minT_Date = minT.getDate();\n        let maxT_Date = maxT.getDate();\n        if (minT_Date === maxT_Date) {\n          let minT_Hour = minT.getHours();\n          let maxT_Hour = maxT.getHours();\n          if (minT_Hour === maxT_Hour) {\n            let minT_Minute = minT.getMinutes();\n            let maxT_Minute = maxT.getMinutes();\n            if (minT_Minute === maxT_Minute) {\n              let minT_Second = minT.getSeconds();\n              let maxT_Second = maxT.getSeconds();\n              if (minT_Second === maxT_Second) {\n                return grids.map((x) => format(x, \"SSS\"));\n              }\n              if (maxT_Second - minT_Second < 2) {\n                return grids.map((x) => format(x, \"ss.SSS\"));\n              }\n              else {\n                return grids.map((x) => format(x, \"ss\"));\n              }\n            }\n            if (maxT_Minute - minT_Minute < 2) {\n              return grids.map((x) => format(x, \"mm:ss\"));\n            }\n            else {\n              return grids.map((x) => format(x, \"mm\"));\n            }\n          }\n          if (maxT_Hour - minT_Hour < 2) {\n            return grids.map((x) => format(x, \"HH:mm\"));\n          }\n          else {\n            return grids.map((x) => format(x, \"HH\"));\n          }\n        }\n        if (maxT_Date - minT_Date < 2) {\n          return grids.map((x) => format(x, \"DD HH\"));\n        }\n        else {\n          // show the month for the first date of the month\n          let prevMonth;\n          return grids.map((x) => {\n            if (prevMonth !== format(x, \"MMM\")) {\n              prevMonth = format(x, \"MMM\")\n              return format(x, \"MMM/DD\")\n            } else {\n              return format(x, \"DD\")\n            }\n          });\n        }\n      }\n      if (maxT_Month - minT_Month < 2) {\n        // show the month for the first date of the month\n        let prevMonth;\n        return grids.map((x) => {\n          if (prevMonth !== format(x, \"MMM\")) {\n            prevMonth = format(x, \"MMM\")\n            return format(x, \"MMM/DD\")\n          } else {\n            return format(x, \"DD\")\n          }\n        });\n      }\n      else {\n        // show the month for the first date of the month\n        let prevMonth;\n        return grids.map((x) => {\n          if (prevMonth !== format(x, \"MMM\")) {\n            prevMonth = format(x, \"MMM\")\n            return format(x, \"MMM\")\n          } else {\n            return format(x, \"DD\")\n          }\n        });\n      }\n    }\n    if (maxT_Year - minT_Year < 2) {\n      return grids.map((x) => format(x, \"YYYY/MMM\"));\n    }\n    else {\n      return grids.map((x) => format(x, \"YYYY\"));\n    }\n  }\n\n  createTextBitmaps(text) {\n    let font = \"300 12px MuseoSans\";\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    ctx.font = font;\n    let width = ctx.measureText(text).width;\n    let height = 12;\n    canvas.width = width;\n    canvas.height = height;\n    ctx.font = font;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(text, width / 2, height / 2);\n    return canvas;\n  }\n\n  bitmapPlot(ctx, width, height, domXs, bitmaps) {\n    for (let i = 0; i < domXs.length; i++) {\n      let bitmap = bitmaps[i];\n      let x = Math.round(domXs[i] - bitmap.width / 2);\n      let y = Math.round(height / 2 - bitmap.height / 2);\n      ctx.drawImage(bitmap, x, y);\n    }\n  }\n\n  ticPlot(ctx, width, height, domXs) {\n    ctx.fillStyle = \"#777777\"\n    ctx.beginPath();\n    let y = Math.round(height);\n    for (let x of domXs) {\n      ctx.moveTo(Math.round(x), y * 0.8);\n      ctx.lineTo(Math.round(x), y);\n    }\n    ctx.stroke();\n  }\n}\n\nexport default DateXAxis;\n","import TempChartBundle from \"./TempChartBundle\";\nexport default TempChartBundle;","import React, { PureComponent } from \"react\";\nimport TempChart from \"./TempChart\";\nimport TempChartLeftPanel from './TempChartLeftPanel'\nimport TempChartYAxis from \"./TempChartYAxis\";\nimport TempChartRedLine from \"./TempChartRedLine\";\nimport { PlotContainer, PlotSubContainer } from \"./PlotContainers/PlotContainers\";\nimport HoverInteractionBox from \"./HoverInteractionBox\";\nimport DynamicDateYAxisTwoLevelPanel from \"./DynamicDateYAxisTwoLevelPanel\";\nimport DateXAxis from \"./DateXAxis\";\n\nconst minY = 0;\nconst maxY = 200;\nconst LEFT_WIDTH = 200\nconst RIGHT_WIDTH = 0\nconst TOP_HEIGHT = 30\nconst BOTTOM_HEIGHT = 0\n\nclass TempChartBundle extends PureComponent {\n    filterDataToDtWindow(data) {\n        let minX = this.props.dtWindow[0] / 1000\n        let maxX = this.props.dtWindow[1] / 1000\n        let filteredData = data\n\n        if (data) {\n            if (minX) {\n                // filter out the data that is within the dtWindow range\n                filteredData = filteredData.filter(function (o) {\n                    return o.time <= maxX && o.time >= minX\n                })\n            }\n        }\n\n        return filteredData\n    }\n\n    extractTimeFromData(data) {\n        let timeArr = []\n        let timeSet = new Set()\n\n        data.map(d => {\n            if (!timeSet.has(d[\"time\"])) {\n                timeArr.push(d[\"time\"])\n                timeSet.add(d[\"time\"])\n            }\n        })\n\n        return timeArr\n    }\n\n    tryToCombineData(filteredData, data) {\n        if (filteredData.length >= 48) {\n            if (filteredData.length >= 48 && filteredData.length < 96) {\n                data = this.combineData(2, data);\n            }\n            else if (filteredData.length >= 96 && filteredData.length < 192) {\n                data = this.combineData(4, data);\n            }\n            else if (filteredData.length >= 192 && filteredData.length < 384) {\n                data = this.combineData(8, data);\n            }\n            else if (filteredData.length >= 384 && filteredData.length < 768) {\n                data = this.combineData(16, data);\n            }\n            else if (filteredData.length >= 768 && filteredData.length < 1536) {\n                data = this.combineData(32, data);\n            }\n            else if (filteredData.length >= 1536 && filteredData.length < 3072) {\n                data = this.combineData(64, data);\n            }\n            else if (filteredData.length >= 3072 && filteredData.length < 6144) {\n                data = this.combineData(128, data);\n            }\n            else if (filteredData.length >= 6144) {\n                data = this.combineData(256, data);\n            }\n        }\n        return data;\n    }\n\n    combineData(combNum, data) {\n        let combinedData = [],\n            curCombinedObj,\n            curCombNum = 0,\n            curMinTemp = null,\n            curMaxTemp = null\n\n        data.map((d, i) => {\n            if (curCombNum === 0) {\n                curCombinedObj = { ...d }\n            }\n\n            if (!curMinTemp && !curMaxTemp) {\n                curMinTemp = d[\"temp\"]\n                curMaxTemp = d[\"temp\"]\n            } else if (d[\"temp\"] < curMinTemp) {\n                curMinTemp = d[\"temp\"]\n            } else if (d[\"temp\"] > curMaxTemp) {\n                curMaxTemp = d[\"temp\"]\n            }\n\n            curCombNum++\n\n            if (curCombNum >= combNum || i === data.length - 1) {\n                curCombNum = 0\n                curCombinedObj[\"temp\"] = [curMinTemp, curMaxTemp]\n                combinedData.push(curCombinedObj)\n                curCombinedObj = {}\n                curMinTemp = null\n                curMaxTemp = null\n            }\n        })\n\n        return combinedData\n    }\n\n    // unix time in ms\n    getDaysBetweenDates = (d0, d1) => {\n        var msPerDay = 8.64e7\n\n        // Copy dates so don't mess them up\n        var x0 = new Date(d0)\n        var x1 = new Date(d1)\n\n        // Set to noon - avoid DST errors\n        x0.setHours(12, 0, 0)\n        x1.setHours(12, 0, 0)\n\n        // Round to remove daylight saving errors\n        return Math.round((x1 - x0) / msPerDay)\n    }\n\n    render() {\n        let { dtWindow, width, height, data } = this.props\n        let filteredData, combinedData\n        let plotWidth = width - LEFT_WIDTH - RIGHT_WIDTH\n        let plotHeight = height - TOP_HEIGHT - BOTTOM_HEIGHT\n        const styles = {\n            leftPanelGradShadow: {\n                position: \"absolute\",\n                top: 0,\n                left: LEFT_WIDTH,\n                height: height,\n                width: 15,\n                opacity: 1,\n                backgroundImage: \"linear-gradient(to right, rgba(0,0,0,0.3), rgba(255,255,255,0))\"\n            }\n        }\n\n        filteredData = this.filterDataToDtWindow(data)\n        // combine unfiltered data to prevent jumpy movement\n        data = this.tryToCombineData(filteredData, data);\n        data = this.filterDataToDtWindow(data)\n\n        return (\n            <PlotContainer width={width} height={height}\n                leftWidth={LEFT_WIDTH} plotWidth={plotWidth} rightWidth={RIGHT_WIDTH}\n                topHeight={TOP_HEIGHT} plotHeight={plotHeight} bottomHeight={BOTTOM_HEIGHT} >\n                {/*Row TOP*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                    <DynamicDateYAxisTwoLevelPanel minX={dtWindow[0]} maxX={dtWindow[1]} height={TOP_HEIGHT} width={LEFT_WIDTH} />\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                    <DateXAxis\n                        minX={dtWindow[0]}\n                        maxX={dtWindow[1]}\n                        height={TOP_HEIGHT}\n                        width={plotWidth} />\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row PLOT*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                    <TempChartLeftPanel panelWidth={LEFT_WIDTH} panelHeight={plotHeight} />\n                    <TempChartYAxis canvasH={plotHeight} canvasW={LEFT_WIDTH} />\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n\n                <PlotSubContainer>\n                    {/* Main plot area interaction */}\n                    <TempChart width={plotWidth} height={plotHeight} minX={dtWindow[0]} maxX={dtWindow[1]} data={data} />\n                    <TempChartRedLine width={plotWidth} height={plotHeight} minX={dtWindow[0]} maxX={dtWindow[1]} time={1509562800} />\n                </PlotSubContainer>\n\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Row BOTTOM*/}\n                {/*Col LEFT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col PLOT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Col RIGHT*/}\n                <PlotSubContainer>\n                </PlotSubContainer>\n                {/*Other stuffs that ignore grid layut*/}\n                <div style={styles.leftPanelGradShadow}>\n                </div>\n            </PlotContainer>\n        )\n    }\n}\n\nexport default TempChartBundle","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport TempChartBundle from \"./lib\";\nimport tempData from \"./tempData.json\"\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.dataTypeToColorDict = {\n            MEDS: \"#C2EEF8\",\n            FLUSHES: \"#5DD2EF\",\n            TPN: \"#84A5D5\",\n            FEEDS: \"#A3DBDC\",\n            lol434ra: \"#C13BDA\",\n            xbo4334x: \"#613BFA\"\n        }\n\n        this.state = {\n            data: tempData,\n            dtWindow: [1482814800000, 1510117200000],\n            width: 1200,\n            height: 400\n        }\n\n        this.meds = [\"MEDS\", \"FLUSHES\", \"FEEDS\", \"TPN\"]\n\n        this.handleRemoveBtnCLick = this.handleRemoveBtnCLick.bind(this)\n    }\n\n    componentDidMount() {\n        let self = this\n        let firstTime = true\n        setInterval(function () {\n            self.simulateDataChange(firstTime)\n            firstTime = false\n        }, 1000)\n    }\n\n    handleRemoveBtnCLick() {\n        let data = this.state.data\n        data = data.slice(0, -1)\n        this.setState({\n            ...this.state,\n            data: [\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 1 },\n                { name: \"Blood Products\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Blood Products\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n            ],\n        })\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault()\n        const data = this.data.value\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":'\n        })\n\n        let json = JSON.parse(jsonStr)\n        let newData = this.state.data\n        newData.push(json)\n        this.setState({\n            data: [...this.state.data, json]\n        })\n    }\n\n    simulateDataChange(firstTime) {\n        let newMaxTime\n        if (firstTime) {\n            newMaxTime = (this.state.data[this.state.data.length - 1][\"time\"]) + 26400\n        } else {\n            newMaxTime = this.state.data[this.state.data.length - 1][\"time\"] + 26400\n        }\n\n        let newTemp = {\n            temp: (Math.floor(Math.random() * 20) + 20), \n            time: newMaxTime\n        }\n\n        let newData = this.state.data\n        // newData = newData.slice(2)\n        newData.push(newTemp)\n\n        this.setState({\n            ...this.state,\n            data: [...newData, newTemp],\n            dtWindow: [this.state.data[0][\"time\"] * 1000, newMaxTime * 1000 - 26400000]\n        })\n        console.log(this.state.data)\n    }\n\n    render() {\n        let { data, dtWindow, width, height } = this.state\n        return (\n            <>\n                <div>Pass in data in the form: {' { value: 1, type: \"MEDS\" } '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <button>ADD DATA</button>\n                </form>\n                <button onClick={this.handleRemoveBtnCLick}>REMOVE DATA</button>\n                <TempChartBundle\n                    data={data}\n                    dtWindow={dtWindow}\n                    width={width}\n                    height={height} />\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}