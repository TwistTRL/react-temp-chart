{"version":3,"sources":["lib/PlottingUtils.js","lib/TempChart.jsx","lib/TempChartLeftPanel.jsx","lib/TempChartYAxis.jsx","lib/TempChartRedLine.jsx","lib/PlotContainers/PlotContainers.js","lib/DynamicDateYAxisTwoLevelPanel.js","lib/Modules/YAxisTwoLevelPanelPlotters.js","lib/PlotInteraction/DragOverlay.js","lib/PlotInteraction/CountDown.js","lib/PlotInteraction/PlotInteractionBox.js","lib/PlotInteraction/PlotInteractionBoxProvider.js","lib/YAxis.js","lib/index.js","lib/TempChartBundle.jsx","index.js"],"names":["toDomYCoord_Linear","height","minY","maxY","dataY","toDomXCoord_Linear","width","minX","maxX","dataX","TempChart","props","drawTempChart","ctx","data","fromBackgroundFillData","clearRect","canvasW","canvasH","i","fillStyle","beginPath","fromBackGroundDomY","toBackGroundDomY","rect","fill","map","d","domY","circle","domX","Array","minDomY","maxDomY","Math","abs","roundRect","grd","getCircle","drawImage","this","tempChartCanvas","refs","tempChartCtx","getContext","createLinearGradient","addColorStop","x0","y0","x1","y1","r","color","w","h","moveTo","quadraticCurveTo","lineTo","closePath","greenCircle","canvas","document","createElement","arc","PI","blackCircle","redCircle","className","ref","style","zIndex","PureComponent","TempChartLeftPanel","styles","tempChartLeftPanel","panelHeight","panelWidth","backgroundColor","tempChartLabel","position","top","left","fontWeight","fontSize","PlotContainer","generateGridLayoutStyle","memoize_one","leftWidth","plotWidth","rightWidth","topHeight","plotHeight","bottomHeight","display","gridGap","gridTemplateColumns","gridTemplateRows","children","Component","PlotSubContainer","React","Children","child","DynamicDateYAxisTwoLevelPanel","createRef","secondaryBitmap","primaryBitmap","text","font","measureText","strokeStyle","textAlign","textBaseline","rotate","getRotatedAxisCoordinate","x","y","fillText","strokeText","createPrimaryCategoryBitmap","draw","current","createSecondaryCategoryBitmap","createLabel","labelBitmap","bgColor","startDomX","endDomX","start","round","bitmap","fillRect","srcx","srcy","drawPrimaryCategory","xOffset","drawSecondaryCategory","minT","Date","maxT","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","format","DragOverlay","handleMouseMove","bind","handleMouseUp","cursor","addEventListener","removeEventListener","ev","stopPropagation","mouseMoveHandler","mouseUpHandler","CountDown","timeout","callback","setTimeout","clearTimeout","INTERACTION_MODEL_PANNING","PlotInteractionBox","handleMouseMove_Hovering","hoveringHandler","getCustomEventObject","handleMouseOut_Hovering","hoverEndHandler","handleMouseDown_Hovering","preventDefault","myEV","initialMouseDownPosition","transition","clickTimeout","autoSelectingTimeout","handleMouseMove_Clicking","selectingHandler","handleMouseUp_Clicking","clickHandler","doubleClickHandler","prevClickTimeStamp","timeStamp","handleMouseMove_AutoSelecting","end","handleMouseUp_AutoSelecting","handleMouseMove_Selecting","handleMouseUp_Selecting","selectedHandler","state","mode","handleMouseMove_Panning","handleMouseUp_Panning","onMouseMove","onMouseOut","onMouseDown","action","nextMode","transitionGraph","setState","getBoundingClientRect","clientX","clientY","panningHandler","pannedHandler","PlotInteractionBoxProvider","handleHovering","hoveringPosition","handleHoverPosChange","handleHoverEnd","handleClick","clickPosition","handleDoubleClick","doubleClickPosition","handleSelecting","selectingPositions","handleSelected","selectedPositions","panningPositions","pannedPositions","handlePanning","handlePanned","render","handlePan","round5","ceil","YAXIS_FONT_STYLE","YAxis","yAxisSkipInterval","yAxisLabelTextCanvasCache","prevPanDist","dynamicMaxY","initMaxY","yAxisLabelPadding","configs","axis","yAxisLabels","generateYAxisLabels","yAxisCanvas","yAxisCtx","setUpCtx","drawYAxis","getYAxisLabelSkipInterval","labelPadding","labelTextHeight","numOfLabelsCanFit","curYAxisLabel","push","lineWidth","textHeight","yAxisLabelInterval","floor","getTextCanvas","stroke","txt","cachedLabelTextCanvas","undefined","e","newMaxY","updateVisbleYRange","TempChartBundle","getDaysBetweenDates","d0","d1","setHours","dtWindow","filteredData","filter","o","time","timeArr","timeSet","Set","has","add","length","combineData","combNum","curCombinedObj","combinedData","curCombNum","curMinTemp","curMaxTemp","isXAxisVisible","leftPanelGradShadow","opacity","backgroundImage","yAxisWrappingDiv","LEFT_WIDTH","filterDataToDtWindow","tryToCombineData","tickPosition","isItalic","isDynamicYAxis","isDynamicXAxis","xAxisPadding","plotStyling","dotSize","App","handleSubmit","jsonStr","value","replace","s","substring","json","JSON","parse","dataTypeToColorDict","MEDS","FLUSHES","TPN","FEEDS","lol434ra","xbo4334x","tempData","meds","handleRemoveBtnCLick","self","firstTime","setInterval","simulateDataChange","slice","name","type","newMaxTime","newTemp","temp","random","newData","console","log","onSubmit","placeholder","element","onClick","ReactDOM","getElementById"],"mappings":"mSAIO,SAASA,EAAmBC,EAAQC,EAAMC,EAAMC,GACnD,OAAOH,GAAUG,EAAQF,KAAUC,EAAOD,GAAQD,GAO/C,SAASI,EAAmBC,EAAOC,EAAMC,EAAMC,GAClD,OAAQA,EAAQF,KAAUC,EAAOD,GAAQD,G,ICiJ9BI,E,YAvJX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAuCVC,cAAgB,SAACC,GAAS,IAAD,EACkB,EAAKF,MAAtCJ,EADe,EACfA,KAAMC,EADS,EACTA,KAAMN,EADG,EACHA,KAAMC,EADH,EACGA,KAAMW,EADT,EACSA,KAC1BC,EAAyB,GAE7BF,EAAIG,UAAU,EAAG,EAAG,EAAKC,QAAS,EAAKC,SAEvC,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,OAAS,EAETA,EADAL,EAAyB,KAAO,EACpB,QAEA,UAEhBF,EAAIQ,YACJR,EAAIO,UAAYA,EAChB,IAAIE,EAAqBtB,EAAmB,EAAKkB,QAAShB,EAAMC,EAAMY,GAClEQ,EAAmBvB,EAAmB,EAAKkB,QAAShB,EAAMC,EAAMY,EAAyB,GAC7FF,EAAIW,KAAK,EAAGF,EAAoB,EAAKL,QAASM,EAAmBD,GACjEP,GAA0B,EAC1BF,EAAIY,OAGRX,EAAKY,KAAI,SAAAC,GACL,IAAIC,EAIAC,EAJMC,EAAOzB,EAAmB,EAAKY,QAASV,EAAO,IAAMC,EAAO,IAAMmB,EAAC,MAK7E,GAHAd,EAAIQ,YAGAM,EAAC,gBAAoBI,MAAO,CAC5B,IAAIC,EAAUhC,EAAmB,EAAKkB,QAAShB,EAAMC,EAAMwB,EAAC,KAAS,IACjEM,EAAUjC,EAAmB,EAAKkB,QAAShB,EAAMC,EAAMwB,EAAC,KAAS,IAC1DO,KAAKC,IAAIF,EAAUD,GAEnB,EACP,EAAKI,UAAUvB,EAAKiB,EAAO,EAAGG,EAAU,EAAGH,EAAO,EAAGE,EAAU,EAAG,GAAI,EAAKK,KAE3E,EAAKD,UAAUvB,EAAKiB,EAAO,EAAGG,EAASH,EAAO,EAAGE,EAAS,GAAI,EAAKK,UAIvET,EAAO5B,EAAmB,EAAKkB,QAAShB,EAAMC,EAAMwB,EAAC,MAGjDE,EADAF,EAAC,KAAW,GACH,EAAKW,UAAU,SACjBX,EAAC,KAAW,GACV,EAAKW,UAAU,OAEf,EAAKA,UAAU,SAG5BzB,EAAI0B,UAAUV,EAAQC,EAAOD,EAAOvB,MAAQ,EAAGsB,EAAOC,EAAO5B,OAAS,OAxF9E,EAAKgB,QAAU,EAAKN,MAAML,MAC1B,EAAKY,QAAU,EAAKP,MAAMV,OAHX,E,iFAOfuC,KAAKC,gBAAkBD,KAAKE,KAAKD,gBACjCD,KAAKG,aAAeH,KAAKC,gBAAgBG,WAAW,MACpDJ,KAAK5B,cAAc4B,KAAKG,cAExBH,KAAKH,IAAMG,KAAKG,aAAaE,qBAAqB,EAAG,EAAG,EAAGL,KAAKtB,SAChEsB,KAAKH,IAAIS,aAAa,KAAO,4BAC7BN,KAAKH,IAAIS,aAAa,KAAO,8BAC7BN,KAAKH,IAAIS,aAAa,KAAO,+B,2CAI7BN,KAAK5B,cAAc4B,KAAKG,gB,gCAGlB9B,EAAKkC,EAAIC,EAAIC,EAAIC,EAAIC,EAAGC,GAC9B,IAAIC,EAAIJ,EAAKF,EACTO,EAAIJ,EAAKF,EACTG,EAAIE,EAAI,IAAGF,EAAIE,EAAI,GACnBF,EAAIG,EAAI,IAAGH,EAAIG,EAAI,GACvBzC,EAAIQ,YACJR,EAAI0C,OAAON,EAAKE,EAAGH,GACnBnC,EAAI2C,iBAAiBP,EAAID,EAAIC,EAAID,EAAKG,GACtCtC,EAAI4C,OAAOR,EAAIC,EAAKC,GACpBtC,EAAI2C,iBAAiBP,EAAIC,EAAID,EAAKE,EAAGD,GACrCrC,EAAI4C,OAAOV,EAAKI,EAAGD,GACnBrC,EAAI2C,iBAAiBT,EAAIG,EAAIH,EAAIG,EAAKC,GACtCtC,EAAI4C,OAAOV,EAAIC,EAAKG,GACpBtC,EAAI2C,iBAAiBT,EAAIC,EAAID,EAAKI,EAAGH,GACrCnC,EAAI6C,YACJ7C,EAAIO,UAAYgC,EAChBvC,EAAIY,S,gCA0DE2B,GACN,GAAc,UAAVA,EAAmB,CACnB,IAAKZ,KAAKmB,YAAa,CACnB,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOtD,MAAQ,EACfsD,EAAO3D,OAAS,EAChB,IAAIY,EAAM+C,EAAOhB,WAAW,MAC5B/B,EAAIkD,IAAI,EAAG,EAAG,EAAG,EAAG,EAAI7B,KAAK8B,IAC7BnD,EAAIO,UAAY,UAChBP,EAAIY,OACJe,KAAKmB,YAAcC,EAEvB,OAAOpB,KAAKmB,YACT,GAAc,UAAVP,EAAmB,CAC1B,IAAKZ,KAAKyB,YAAa,CACnB,IAAIL,EAASC,SAASC,cAAc,UACpCF,EAAOtD,MAAQ,EACfsD,EAAO3D,OAAS,EAChB,IAAIY,EAAM+C,EAAOhB,WAAW,MAC5B/B,EAAIkD,IAAI,EAAG,EAAG,EAAG,EAAG,EAAI7B,KAAK8B,IAC7BnD,EAAIO,UAAY,UAChBP,EAAIY,OACJe,KAAKyB,YAAcL,EAEvB,OAAOpB,KAAKyB,YAEZ,IAAKzB,KAAK0B,UAAW,CACjB,IAAIN,EAASC,SAASC,cAAc,UACpCF,EAAOtD,MAAQ,EACfsD,EAAO3D,OAAS,EAChB,IAAIY,EAAM+C,EAAOhB,WAAW,MAC5B/B,EAAIkD,IAAI,EAAG,EAAG,EAAG,EAAG,EAAI7B,KAAK8B,IAC7BnD,EAAIO,UAAY,UAChBP,EAAIY,OACJe,KAAK0B,UAAYN,EAErB,OAAOpB,KAAK0B,Y,+BAQhB,OACI,4BACIC,UAAU,oBACVC,IAAI,kBACJ9D,MAAOkC,KAAKvB,QACZhB,OAAQuC,KAAKtB,QACbmD,MARa,CAAEC,QAAS,S,GA1IhBC,iBC8BTC,E,YAjCX,WAAY7D,GAAQ,IAAD,8BACf,4CAAMA,KACDM,QAAU,EAAKN,MAAMM,QAC1B,EAAKC,QAAU,EAAKP,MAAMO,QAHX,E,sEAMT,IAAD,EAC6BsB,KAAK7B,MACjC8D,EAAS,CACXC,mBAAoB,CAChBzE,OAJH,EACC0E,YAGwB,KACtBrE,MALH,EACcsE,WAIS,KACpBC,gBAAiB,WAErBC,eAAgB,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACN7B,MAAO,UACP8B,WAAY,MACZC,SAAU,SAGlB,OACI,yBAAKhB,UAAU,wBACXE,MAAOI,EAAOC,oBACd,yBAAKP,UAAU,mBACXE,MAAOI,EAAOK,gBADlB,iBACiD,OADjD,Y,GA3BiBP,iB,GCAJA,gBCKEA,gB,OCHlBa,G,MAAb,2MAeEC,wBAA0BC,uBAAY,SAAChF,EAAML,EACrBsF,EAAUC,EAAUC,EACpBC,EAAUC,EAAWC,GAQ3C,MAPY,CAAEC,QAAQ,OACR5F,OAAOA,EACPK,MAAMA,EACNwF,QAAQ,EACRC,oBAAoB,GAAD,OAAIR,EAAJ,cAAmBC,EAAnB,cAAkCC,EAAlC,MACnBO,iBAAiB,GAAD,OAAIN,EAAJ,cAAmBC,EAAnB,cAAmCC,EAAnC,UAvBlC,wEACW,IAAD,EAGqCpD,KAAK7B,MAF1CsF,EADA,EACAA,SAAS3F,EADT,EACSA,MAAML,EADf,EACeA,OACfsF,EAFA,EAEAA,UAAUC,EAFV,EAEUA,UAAUC,EAFpB,EAEoBA,WACpBC,EAHA,EAGAA,UAAUC,EAHV,EAGUA,WAAWC,EAHrB,EAGqBA,aACvBvB,EAAQ7B,KAAK6C,wBAAyB/E,EAAML,EACNsF,EAAUC,EAAUC,EACpBC,EAAUC,EAAWC,GAC/D,OACE,yBAAKvB,MAAOA,EAAOF,UAAU,mCAC1B8B,OAVT,GAAmCC,cA6BtBC,EAAmB,SAACxF,GAC/B,OACE,yBAAKwD,UAAU,mCACXxD,EAAMsF,SACNG,IAAMC,SAAS3E,IAAIf,EAAMsF,UAAS,SAACK,GAAD,OAChC,yBAAKnC,UAAU,mCACZmC,MAEL,O,gBCpCR,I,gBAkEeC,E,YA9Db,WAAY5F,GAAO,IAAD,8BAChB,4CAAMA,KACDyD,IAAMgC,IAAMI,YACjB,EAAKC,gBAAkB5C,SAASC,cAAc,UAC9C,EAAK4C,cCVF,SAAqCC,EAAM/C,GAChD,IAAIgD,EAAO,iBAIP/F,GADJ+C,EAASA,GAAUC,SAASC,cAAc,WACzBlB,WAAW,MAC5B/B,EAAI+F,KAAOA,EACX,IACI3G,EAASY,EAAIgG,YAAYF,GAAMrG,MACnCsD,EAAOtD,MAFK,GAGZsD,EAAO3D,OAASA,EAChBY,EAAI+F,KAAOA,EACX/F,EAAIO,UAVY,QAWhBP,EAAIiG,YAVc,UAWlBjG,EAAIkG,UAAY,SAChBlG,EAAImG,aAAe,SACnBnG,EAAIoG,QAAQ/E,KAAK8B,GAAG,GAhBoC,MAiB5CkD,mCAAyB5G,EAAQL,EAAO,GAAGiC,KAAK8B,GAAG,GAA1DmD,EAjBmD,EAiBnDA,EAAEC,EAjBiD,EAiBjDA,EAGP,OAFAvG,EAAIwG,SAASV,EAAKQ,EAAEC,GACpBvG,EAAIyG,WAAWX,EAAKQ,EAAEC,GACfxD,EDVgB2D,CAA4B,IAJjC,E,sEAOT,IAAD,EACiB/E,KAAK7B,MAAtBV,EADA,EACAA,OAAOK,EADP,EACOA,MACb,OACE,4BAAQ8D,IAAK5B,KAAK4B,IAAK9D,MAAOA,EAAOL,OAAQA,EAAQoE,MAAO,CAACwB,QAAQ,QAAQ5F,OAAOA,EAAOK,MAAMA,O,0CAKnGkC,KAAKgF,S,2CAILhF,KAAKgF,S,6BAGA,IAAD,EAEkBhF,KAAK7B,MADrBJ,EADF,EACEA,KAAKC,EADP,EACOA,KACLP,EAFF,EAEEA,OAAOK,EAFT,EAESA,MACTsD,EAASpB,KAAK4B,IAAIqD,QACjBhB,EAAiCjE,KAAjCiE,gBAAgBC,EAAiBlE,KAAjBkE,cAGrBD,ECZG,SAAuCE,EAAM/C,GAClD,IAAIgD,EAAO,iBAGP/F,GADJ+C,EAASA,GAAUC,SAASC,cAAc,WACzBlB,WAAW,MAC5B/B,EAAI+F,KAAOA,EACX,IAAItG,EAAQO,EAAIgG,YAAYF,GAAMrG,MASlC,OAPAsD,EAAOtD,MAAQA,EACfsD,EAAO3D,OAFM,GAGbY,EAAI+F,KAAOA,EACX/F,EAAIO,UATY,QAUhBP,EAAIkG,UAAY,SAChBlG,EAAImG,aAAe,SACnBnG,EAAIwG,SAASV,EAAKrG,EAAM,EAAEL,GACnB2D,EDHa8D,CADNlF,KAAKmF,YAAYpH,EAAKC,GACoBiG,GAEtD,IAAI5F,EAAM+C,EAAOhB,WAAW,MAC5B/B,EAAIG,UAAU,EAAE,EAAEV,EAAML,GCGrB,SAA6BY,EAAIP,EAAML,EAAO2H,EAAYC,EAAQC,EAAUC,GACjF,IACIC,EAAQ9F,KAAK+F,MAAMH,GAEnB1E,EAAQyE,EACRK,EAASN,EACTjC,EAHMzD,KAAK+F,MAAMF,GAGAC,EAGrB,GAFAnH,EAAIO,UAAYgC,EAChBvC,EAAIsH,SAAS,EAAEH,EAnDW,GAmDK/H,GACZ,IAAfiI,EAAO5H,OACS,IAAhB4H,EAAOjI,OAAY,CACrB,IAAImI,EAAOlG,KAAK+F,MAAMC,EAAO5H,MAAM,EAAEkF,IACjC6C,EAAOnG,KAAK+F,MAAMC,EAAOjI,OAAO,EAAE0F,EAAW,GACjD9E,EAAI0B,UAAU2F,EAAOE,EAAKC,EAxDF,GAwDiB1C,EACpB,EAAEqC,EAzDC,GAyDerC,IDhBvC2C,CAAoBzH,EAAIP,EAAML,EAAOyG,EArCV,UAqC+C,EAAEzG,GCwCzE,SAA+BY,EAAIP,EAAML,EAAO2H,EAAYC,EAAQC,EAAUC,GACnF,KAAwB,IAApBH,EAAYtH,OACS,IAArBsH,EAAY3H,QACZ2H,EAAY3H,OAASA,GAFzB,CAKA,IAAIuF,EAAYlF,EAvFU,GAyFtB0H,EAAQ9F,KAAK+F,MAAMH,GAEnBnC,EADMzD,KAAK+F,MAAMF,GACAC,EACrBnH,EAAIO,UAAYyG,EAChBhH,EAAIsH,SA7FsB,GA6FLH,EAAMxC,EAAUG,GACrC,IACI0C,EAAOnG,KAAK+F,MAAML,EAAY3H,OAAO,EAAE0F,EAAW,GACtD9E,EAAI0B,UAAUqF,EAFH,EAEoBS,EAAK7C,EAAUG,EACzB4C,GAAUP,EAAMxC,EAAUG,IDvD7C6C,CAAsB3H,EAAIP,EAAML,EAAOwG,EArCV,UAqCmD,EAAExG,K,kCAGxEM,EAAKC,GACf,IAAIiI,EAAO,IAAIC,KAAKnI,GAChBoI,EAAO,IAAID,KAAKlI,GACpB,OAAIiI,EAAKG,gBAAgBD,EAAKC,cACxBH,EAAKI,aAAaF,EAAKE,WACrBJ,EAAKK,YAAYH,EAAKG,UACpBL,EAAKM,aAAaJ,EAAKI,WACrBN,EAAKO,eAAeL,EAAKK,aACvBP,EAAKQ,eAAeN,EAAKM,aACpBC,iBAAOT,EAAK,wBAEdS,iBAAOT,EAAK,qBAEdS,iBAAOT,EAAK,kBAEdS,iBAAOT,EAAK,eAEdS,iBAAOT,EAAK,YAEdS,iBAAOT,EAAK,QAEd,W,GA3DiClE,iB,eEsC7B4E,G,mBAxCb,WAAYxI,GAAQ,IAAD,8BACjB,4CAAMA,KACDyI,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAHJ,E,sEAMT,IACFE,EAAW/G,KAAK7B,MAAhB4I,OACN,OAAO,yBAAKpF,UAAU,aAAaE,MAAO,CAAEkF,OAAQA,O,0CAIpD1F,SAAS2F,iBAAiB,YAAahH,KAAK4G,iBAAiB,GAC7DvF,SAAS2F,iBAAiB,UAAWhH,KAAK8G,eAAe,K,6CAIzDzF,SAAS4F,oBAAoB,YAAajH,KAAK4G,iBAAiB,GAChEvF,SAAS4F,oBAAoB,UAAWjH,KAAK8G,eAAe,K,sCAG9CI,GACdA,EAAGC,mBAEHC,EAD2BpH,KAAK7B,MAA1BiJ,kBACWF,K,oCAGLA,GACZA,EAAGC,mBAEHE,EADyBrH,KAAK7B,MAAxBkJ,gBACSH,O,GA/BOnF,kBCkBXuF,E,iLAnBX,OAAO,O,0CAGW,IAAD,EACQtH,KAAK7B,MAAzBoJ,EADY,EACZA,QAAQC,EADI,EACJA,SACbxH,KAAKuH,QAAUE,WAAWD,EAASD,K,2CAInCG,aAAa1H,KAAKuH,SADA,MAEOvH,KAAK7B,MAAzBoJ,EAFa,EAEbA,QAAQC,EAFK,EAELA,SACbxH,KAAKuH,QAAUE,WAAWD,EAASD,K,6CAInCG,aAAa1H,KAAKuH,a,GAjBExF,iBC0CX4F,G,OAzByB,mBAXT,WAWS,eALN,YALH,aAUS,cAVT,YAUS,mBAFR,UAPI,iBASI,cAJN,YAJF,aAQQ,cAHR,UARD,YAWS,kBATJ,iBASI,mBAFR,UALF,WAOU,cAJN,YAJF,aAQQ,kBARR,YAQQ,eAHR,UARD,aAWS,cAPV,UAOU,eAHR,UARD,aA0BW,mBA1BX,WA0BW,eApBR,YALH,aAyBW,cAzBX,YAyBW,mBAjBV,UANA,aAuBU,cAnBR,YAJF,aAuBU,cAlBV,UARD,YA0BW,kBAvBV,YAuBU,eAlBV,UARD,aAoCS,mBApCT,WAoCS,eA9BN,YALH,aAmCS,cAnCT,YAmCS,mBA3BR,UALF,WAgCU,cA7BN,YAHJ,WAgCU,cA5BR,UARD,YAoCS,kBAhCV,UAgCU,eA5BR,UARD,aAoCS,GAuOvBC,GA7NoB,mBA9CN,WA8CM,eAxCH,YALH,aA6CM,cA7CN,WA6CM,eAtCL,UARD,a,YAoD3B,WAAYzJ,GAAQ,IAAD,8BACjB,4CAAMA,KAyGR0J,yBAA2B,SAAAX,IAGzBY,EAF0B,EAAK3J,MAAzB2J,iBACK,EAAKC,qBAAqBb,KA5GpB,EAgHnBc,wBAA0B,SAAAd,IAExBe,EAD0B,EAAK9J,MAAzB8J,oBAjHW,EAqHnBC,yBAA2B,SAAAhB,GAAO,IAC1Be,EAAoB,EAAK9J,MAAzB8J,gBACNf,EAAGiB,iBACH,IAAIC,EAAO,EAAKL,qBAAqBb,GACrC,EAAKmB,yBAA2BD,EAChCH,IACA,EAAKK,WAzKuB,cA8CX,EA8HnBC,aAAe,WACb,EAAKD,WA1KqB,YA2CT,EAkInBE,qBAAuB,WACrB,EAAKF,WA9KqB,YA2CT,EAsInBG,yBAA2B,SAAAvB,GACE,EAAK/I,MAA1BuK,iBAD0B,IAE1BL,EAFyB,eAEzBA,yBACFD,EAAO,EAAKL,qBAAqBb,GAEnCxH,KAAKC,IAAIyI,EAAK9I,KAAO+I,EAAyB/I,MAAQ,IACtDI,KAAKC,IAAIyI,EAAKhJ,KAAOiJ,EAAyB/I,MAAQ,IAItD,EAAKgJ,WA7LqB,cA6CX,EAoJnBK,uBAAyB,SAAAzB,GAAO,IAAD,EACc,EAAK/I,MAA1CyK,EADuB,EACvBA,aAAcC,EADS,EACTA,mBACdC,EAFuB,eAEvBA,mBACFV,EAAOlB,EAEc,OAAvB4B,GACAA,EAAqB,IAAM5B,EAAG6B,WAE9B,EAAKD,mBAAqB5B,EAAG6B,UAC7BH,EAAaR,KAEb,EAAKU,mBAAqB,KAC1BD,EAAmBT,IAErB,EAAKE,WA9MqB,YA4CT,EAqKnBU,8BAAgC,SAAA9B,GAAO,IAC/BwB,EAAqB,EAAKvK,MAA1BuK,iBACAL,EAF8B,eAE9BA,yBACFD,EAAO,EAAKL,qBAAqBb,GAEnCxH,KAAKC,IAAIyI,EAAK9I,KAAO+I,EAAyB/I,MAAQ,IACtDI,KAAKC,IAAIyI,EAAKhJ,KAAOiJ,EAAyB/I,MAAQ,KAItDoJ,EAAiB,CAAElD,MAAO6C,EAA0BY,IAAKb,IACzD,EAAKE,WA7NqB,eA6CX,EAoLnBY,4BAA8B,SAAAhC,GAC5B,EAAKoB,WAjOqB,YA4CT,EAwLnBa,0BAA4B,SAAAjC,IAI1BwB,EAH2B,EAAKvK,MAA1BuK,kBAGW,CAAElD,MAJa,eAE1B6C,yBAE8CY,IADzC,EAAKlB,qBAAqBb,MA3LpB,EA+LnBkC,wBAA0B,SAAAlC,IAIxBmC,EAH0B,EAAKlL,MAAzBkL,iBAGU,CAAE7D,MAJY,eAExB6C,yBAE6CY,IADxC,EAAKlB,qBAAqBb,KAErC,EAAKoB,WAhPqB,YA8C1B,EAAKgB,MAAQ,CAAEC,KAtDU,YAuDzB,EAAK3H,IAAMgC,IAAMI,YACjB,EAAKqE,yBAA2B,KAChC,EAAKS,mBAAqB,KAC1B,EAAKU,wBAA0B,EAAKA,wBAAwB3C,KAA7B,gBAC/B,EAAK4C,sBAAwB,EAAKA,sBAAsB5C,KAA3B,gBAPZ,E,sEAUT,IAAD,EAC2B7G,KAAK7B,MAAjCL,EADC,EACDA,MAAOL,EADN,EACMA,OAAQgG,EADd,EACcA,SACjB5B,EAAQ,CAAE/D,QAAOL,UAErB,OAAQuC,KAAKsJ,MAAMC,MACjB,IAnEuB,WAoErB,OACE,6BACE,yBACE3H,IAAK5B,KAAK4B,IACVC,MAAOA,EACP6H,YAAa1J,KAAK6H,yBAClB8B,WAAY3J,KAAKgI,wBACjB4B,YAAa5J,KAAKkI,0BAEjBzE,IAIT,IAhFuB,WAiFrB,OACE,6BACE,yBAAK7B,IAAK5B,KAAK4B,IAAKC,MAAOA,GACxB4B,GAEH,kBAAC,EAAD,CACE2D,iBAAkBpH,KAAKyI,yBACvBpB,eAAgBrH,KAAK2I,uBACrB5B,OAAO,UAET,kBAAC,EAAD,CAAWQ,QAAS,IAAKC,SAAUxH,KAAKuI,gBAG9C,IA7F4B,gBA8F1B,OACE,6BACE,yBAAK3G,IAAK5B,KAAK4B,IAAKC,MAAOA,GACxB4B,GAEH,kBAAC,EAAD,CACE2D,iBAAkBpH,KAAKgJ,8BACvB3B,eAAgBrH,KAAKkJ,4BACrBnC,OAAO,gBAET,kBAAC,EAAD,CAAWQ,QAAS,IAAKC,SAAUxH,KAAKwI,wBAG9C,IA1GwB,YA2GtB,OACE,6BACE,yBAAK5G,IAAK5B,KAAK4B,IAAKC,MAAOA,GACxB4B,GAEH,kBAAC,EAAD,CACE2D,iBAAkBpH,KAAKmJ,0BACvB9B,eAAgBrH,KAAKoJ,wBACrBrC,OAAO,iBAIf,IAtHsB,UAuHpB,OACE,6BACE,yBAAKnF,IAAK5B,KAAK4B,IAAKC,MAAOA,GACxB4B,GAEH,kBAAC,EAAD,CACE2D,iBAAkBpH,KAAKwJ,wBACvBnC,eAAgBrH,KAAKyJ,sBACrB1C,OAAO,cAIf,QACE,OAAO,2BAAI/G,KAAKsJ,MAAMC,S,iCAKjBM,GAAS,IAGdC,EAFsB9J,KAAK7B,MAAzB4L,gBACS/J,KAAKsJ,MAAdC,MAC+BM,GACjCC,GACF9J,KAAKgK,SAAS,CAAET,KAAMO,M,2CAIL5C,GAAK,IAAD,EACHlH,KAAK4B,IAAIqD,QAAQgF,wBAA/BxH,EADiB,EACjBA,KAAMD,EADW,EACXA,IACN0H,EAAqBhD,EAArBgD,QAASC,EAAYjD,EAAZiD,QAGf,MAAO,CAAE7K,KAFE4K,EAAUzH,EAENrD,KADJ+K,EAAU3H,EACA0H,UAASC,a,8CAgGRjD,IAItBkD,EAHyBpK,KAAK7B,MAAxBiM,gBAGS,CAAE5E,MAFkBxF,KAA7BqI,yBAE4CY,IADvCjJ,KAAK+H,qBAAqBb,O,4CAIjBA,IAIpBmD,EAHwBrK,KAAK7B,MAAvBkM,eAGQ,CAAE7E,MAFmBxF,KAA7BqI,yBAE2CY,IADtCjJ,KAAK+H,qBAAqBb,KAErClH,KAAKsI,WA/PqB,e,GA2CGvG,kBCsClBuI,E,YA3Fb,WAAYnM,GAAQ,IAAD,8BACjB,4CAAMA,KAmCRoM,eAAiB,SAAAC,GACf,EAAKR,SAAL,eAAmB,EAAKV,MAAxB,CAA+BkB,sBAC3B,EAAKrM,MAAMsM,sBACb,EAAKtM,MAAMsM,qBAAqBD,IAvCjB,EA2CnBE,eAAiB,WACf,EAAKV,SAAL,eAAmB,EAAKV,MAAxB,CAA+BkB,iBAAkB,QAC7C,EAAKrM,MAAMsM,sBACb,EAAKtM,MAAMsM,qBAAqB,OA9CjB,EAkDnBE,YAAc,SAAAC,GACZ,EAAKZ,SAAL,eACK,EAAKV,MADV,CAEEsB,mBAEE,EAAKzM,MAAMwM,aACb,EAAKxM,MAAMwM,YAAYC,IAxDR,EA4DnBC,kBAAoB,SAAAC,GAClB,EAAKd,SAAL,eAAmB,EAAKV,MAAxB,CAA+BwB,0BA7Dd,EAgEnBC,gBAAkB,SAAAC,GAChB,EAAKhB,SAAL,eAAmB,EAAKV,MAAxB,CAA+B0B,yBAjEd,EAoEnBC,eAAiB,SAAAC,GACf,EAAKlB,SAAL,eACK,EAAKV,MADV,CAEE4B,oBACAF,mBAAoB,SAtEtB,EAAK1B,MAAQ,CACXkB,iBAAkB,KAClBI,cAAe,KACfE,oBAAqB,KACrBE,mBAAoB,KACpBE,kBAAmB,KACnBC,iBAAkB,KAClBC,gBAAiB,MAEnB,EAAKC,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,aAAe,EAAKA,aAAazE,KAAlB,gBAZH,E,sEAeT,IAAD,EACyB7G,KAAK7B,MAA/BoN,EADC,EACDA,OAAQzN,EADP,EACOA,MAAOL,EADd,EACcA,OACrB,OACE,kBAAC,EAAD,CACEK,MAAOA,EACPL,OAAQA,EACRsM,gBAAiBpC,EACjBG,gBAAiB9H,KAAKuK,eACtBtC,gBAAiBjI,KAAK0K,eACtB9B,aAAc5I,KAAK2K,YACnB9B,mBAAoB7I,KAAK6K,kBACzBnC,iBAAkB1I,KAAK+K,gBACvB1B,gBAAiBrJ,KAAKiL,eACtBb,eAAgBpK,KAAKqL,cACrBhB,cAAerK,KAAKsL,cAEnBC,EAAOvL,KAAKsJ,U,oCA6CL6B,GACZnL,KAAKgK,SAAL,eAAmBhK,KAAKsJ,MAAxB,CAA+B6B,sBAC3BnL,KAAK7B,MAAMqN,WACbxL,KAAK7B,MAAMqN,UAAUL,K,mCAIZC,GACXpL,KAAKgK,SAAL,eAAmBhK,KAAKsJ,MAAxB,CAA+B8B,kBAAiBD,iBAAkB,QAC9DnL,KAAK7B,MAAMmN,cACbtL,KAAK7B,MAAMmN,aAAaF,O,GAvFW1H,aCDzC,SAAS+H,EAAQ9G,GACf,OAAOjF,KAAK+F,MAAyB,EAAnB/F,KAAKgM,KAAK/G,EAAI,IAGlC,IAAMgH,EACE,GADFA,EAEG,QAFHA,EAGQ,wBAgOCC,E,YA5Nb,WAAazN,GAAQ,IAAD,8BAClB,4CAAMA,KACDM,QAAU,EAAKN,MAAMM,QAC1B,EAAKC,QAAU,EAAKP,MAAMO,QAC1B,EAAKhB,KAAO,EAAKS,MAAMT,KACvB,EAAKC,KAAO,EAAKQ,MAAMR,KACvB,EAAKkO,kBAAoB,GACzB,EAAKC,0BAA4B,GACjC,EAAKN,UAAY,EAAKA,UAAU3E,KAAf,gBACjB,EAAKyE,aAAe,EAAKA,aAAazE,KAAlB,gBACpB,EAAKkF,YAAc,EACnB,EAAKC,YAAc,EACnB,EAAKC,SAAW,EAAK9N,MAAMR,KAZT,E,iFAgBlBqC,KAAKkM,kBAAoBlM,KAAK7B,MAAMgO,QAAQC,KAAKF,kBACjDlM,KAAKqM,YAAcrM,KAAKsM,oBAAgC,IAAZtM,KAAKrC,MACjDqC,KAAKuM,YAAcvM,KAAKE,KAAKqM,YAC7BvM,KAAKwM,SAAWxM,KAAKuM,YAAYnM,WAAW,MAC5CJ,KAAKyM,SAASzM,KAAKwM,UACnBxM,KAAK0M,UACH1M,KAAKwM,SACLxM,KAAK2M,0BACH3M,KAAKtC,KACLsC,KAAKrC,KACLqC,KAAKtB,QACLsB,KAAKkM,kBACL,O,2CAMJlM,KAAKkM,kBAAoBlM,KAAK7B,MAAMgO,QAAQC,KAAKF,kBACjDlM,KAAKtC,KAAOsC,KAAK7B,MAAMT,KACvBsC,KAAKrC,KAAOqC,KAAK7B,MAAMR,KACvBqC,KAAK0M,UACH1M,KAAKwM,SACLxM,KAAK2M,0BACH3M,KAAKtC,KACLsC,KAAKrC,KACLqC,KAAKtB,QACLsB,KAAKkM,kBACL,O,yCAKczO,EAAQC,EAAMC,EAAMC,GACtC,OAAOH,GAAUG,EAAQF,KAAUC,EAAOD,GAAQD,K,gDAIlDC,EACAC,EACAF,GAGC,IAFDmP,EAEA,uDAFe,GACfC,EACA,uCACIC,EAAoBpN,KAAK+F,MAC3BhI,GAAUoP,EAAkBD,IAG9B,OAAOnB,GAAQ9N,EAAOD,GAAQoP,K,0CAGXnP,GAInB,IAHA,IAAI0O,EAAc,GAIZU,EAAgB,EACpBA,EAAgBtB,EAAO9N,GACvBoP,GALuB,EAOvBV,EAAYW,KAAKD,GAGnB,OAAOV,I,+BAGChO,GAERA,EAAIiG,YAAc,QAClBjG,EAAI4O,UAAY,IAEhB5O,EAAI+F,KACF,OAASuH,EAAwB,MAAQA,EAC3CtN,EAAI4O,UAAY,GAChB5O,EAAImG,aAAe,SACnBnG,EAAIkG,UAAY,QAChBlG,EAAIO,UAAY,OAChBoB,KAAKkN,WAAa7O,EAAIgG,YAAY,KAAKvG,Q,gCAG9BO,EAAK8O,GAId9O,EAAIG,UAAU,EAAG,EAAGwB,KAAKvB,QAASuB,KAAKtB,SACvCL,EAAIQ,YAGJR,EAAI0C,OAAOf,KAAKvB,QAAS,GACzBJ,EAAI4C,OAAOjB,KAAKvB,QAASuB,KAAKtB,QAAU,GAGxC,IAAK,IAAIC,EAAI,EAAGA,EAAIqB,KAAKrC,KAAMgB,GAAKwO,EAAoB,CACtD,IAAI/N,EAAOM,KAAK0N,MACdpN,KAAKxC,mBACHwC,KAAKtB,QACLsB,KAAKtC,KACLsC,KAAKrC,KACLqC,KAAKqM,YAAY1N,KAGrBN,EAAI0C,OAAOf,KAAKvB,QApBa,EAoBuBW,GACpDf,EAAI4C,OAAOjB,KAAKvB,QAASW,GACzBf,EAAI0B,UACFC,KAAKqN,cAAcrN,KAAKqM,YAAY1N,IACpC,EACAS,EAAOY,KAAKkN,WAAa,GAI7B,GAAIlN,KAAKtC,KAAO,EACd,IAAK,IAAIiB,EAAIwO,EAAoBxO,EAAIqB,KAAKrC,KAAMgB,GAAKwO,EAAoB,CACvE,IAAI/N,EAAOM,KAAK0N,MACdpN,KAAKxC,mBACHwC,KAAKtB,QACLsB,KAAKtC,KACLsC,KAAKrC,MACJqC,KAAKqM,YAAY1N,KAGtBN,EAAI0C,OAAOf,KAAKvB,QAvCW,EAuCyBW,GACpDf,EAAI4C,OAAOjB,KAAKvB,QAASW,GACzBf,EAAI0B,UACFC,KAAKqN,eAAerN,KAAKqM,YAAY1N,IACrC,EACAS,EAAOY,KAAKkN,WAAa,GAK/B7O,EAAIiP,W,oCAGSC,GACb,IAAIC,EAAwBxN,KAAK8L,0BAA0ByB,GAE3D,QAA8BE,IAA1BD,EAAqC,CACvC,IAAIpM,EAASC,SAASC,cAAc,UAChCjD,EAAM+C,EAAOhB,WAAW,MAC5BgB,EAAOtD,MAAQkC,KAAKvB,QACpB2C,EAAO3D,OAA2B,EAAlBuC,KAAKkN,WAGrB7O,EAAI+F,KAAOuH,EAAwB,MAAQA,EAC3CtN,EAAImG,aAAe,MACnBnG,EAAIkG,UAAY,QAChBlG,EAAIO,UAAY+M,EAChBtN,EAAIwG,SAAS0I,EAAKvN,KAAKvB,QAAU,EAAG,GACpC+O,EAAwBpM,EACxBpB,KAAK8L,0BAA0ByB,GAAOnM,EAGxC,OAAOoM,I,gCAGEE,GAET,IAAIC,EAAU3N,KAAKrC,MAAQ+P,EAAEzE,IAAI7J,KAAOsO,EAAElI,MAAMpG,KAAOY,KAAK+L,aAE5D/L,KAAK7B,MAAMyP,mBAAmB,EAAED,EAASA,IACzC3N,KAAK+L,YAAc2B,EAAEzE,IAAI7J,KAAOsO,EAAElI,MAAMpG,O,qCAKxCY,KAAK+L,YAAc,I,+BAMnB,OACE,6BACE,yBACElK,MAAO,CACLU,SAAU,aAGZ,4BACEZ,UAAU,cACVC,IAAI,cACJ9D,MAAOkC,KAAKvB,QACZhB,OAAQuC,KAAKtB,UACZ,KACE,IACP,yBACEmD,MAAO,CACLU,SAAU,WACVwE,OAAQ,cAGV,kBAAC,EAAD,CACEjJ,MAAOkC,KAAKvB,QACZhB,OAAQuC,KAAKtB,QACb8M,UAAWxL,KAAKwL,UAChBF,aAActL,KAAKsL,aACnBC,OAAQ,eACP,KACE,S,GAvNKxJ,iBCbL8L,G,kNCiHbC,oBAAsB,SAACC,EAAIC,GACzB,IAGIzN,EAAK,IAAI2F,KAAK6H,GACdtN,EAAK,IAAIyF,KAAK8H,GAOlB,OAJAzN,EAAG0N,SAAS,GAAI,EAAG,GACnBxN,EAAGwN,SAAS,GAAI,EAAG,GAGZvO,KAAK+F,OAAOhF,EAAKF,GAXT,Q,EAcjBqN,mBAAqB,a,oFA1GCtP,GACpB,IAAIP,EAAOiC,KAAK7B,MAAM+P,SAAS,GAAK,IAChClQ,EAAOgC,KAAK7B,MAAM+P,SAAS,GAAK,IAChCC,EAAe7P,EAWnB,OATIA,GACEP,IAEFoQ,EAAeA,EAAaC,QAAO,SAAUC,GAC3C,OAAOA,EAAEC,MAAQtQ,GAAQqQ,EAAEC,MAAQvQ,MAKlCoQ,I,0CAGY7P,GACnB,IAAIiQ,EAAU,GACVC,EAAU,IAAIC,IASlB,OAPAnQ,EAAKY,KAAI,SAAAC,GACFqP,EAAQE,IAAIvP,EAAC,QAChBoP,EAAQvB,KAAK7N,EAAC,MACdqP,EAAQG,IAAIxP,EAAC,UAIVoP,I,uCAGSJ,EAAc7P,GAoB9B,OAnBI6P,EAAaS,QAAU,KACrBT,EAAaS,QAAU,IAAMT,EAAaS,OAAS,GACrDtQ,EAAO0B,KAAK6O,YAAY,EAAGvQ,GAClB6P,EAAaS,QAAU,IAAMT,EAAaS,OAAS,IAC5DtQ,EAAO0B,KAAK6O,YAAY,EAAGvQ,GAClB6P,EAAaS,QAAU,KAAOT,EAAaS,OAAS,IAC7DtQ,EAAO0B,KAAK6O,YAAY,EAAGvQ,GAClB6P,EAAaS,QAAU,KAAOT,EAAaS,OAAS,IAC7DtQ,EAAO0B,KAAK6O,YAAY,GAAIvQ,GACnB6P,EAAaS,QAAU,KAAOT,EAAaS,OAAS,KAC7DtQ,EAAO0B,KAAK6O,YAAY,GAAIvQ,GACnB6P,EAAaS,QAAU,MAAQT,EAAaS,OAAS,KAC9DtQ,EAAO0B,KAAK6O,YAAY,GAAIvQ,GACnB6P,EAAaS,QAAU,MAAQT,EAAaS,OAAS,KAC9DtQ,EAAO0B,KAAK6O,YAAY,IAAKvQ,GACpB6P,EAAaS,QAAU,OAChCtQ,EAAO0B,KAAK6O,YAAY,IAAKvQ,KAG1BA,I,kCAGIwQ,EAASxQ,GACpB,IACEyQ,EADEC,EAAe,GAEjBC,EAAa,EACbC,EAAa,KACbC,EAAa,KA4Bf,OA1BA7Q,EAAKY,KAAI,SAACC,EAAGR,GACQ,IAAfsQ,IACFF,EAAc,eAAQ5P,IAGnB+P,GAAeC,EAGThQ,EAAC,KAAW+P,EACrBA,EAAa/P,EAAC,KACLA,EAAC,KAAWgQ,IACrBA,EAAahQ,EAAC,OALd+P,EAAa/P,EAAC,KACdgQ,EAAahQ,EAAC,SAOhB8P,GAEkBH,GAAWnQ,IAAML,EAAKsQ,OAAS,KAC/CK,EAAa,EACbF,EAAc,KAAW,CAACG,EAAYC,GACtCH,EAAahC,KAAK+B,GAClBA,EAAiB,GACjBG,EAAa,KACbC,EAAa,SAIVH,I,+BAqBE,IAELb,EAFI,EACgDnO,KAAK7B,MAAvD+P,EADE,EACFA,SAAUpQ,EADR,EACQA,MAAOL,EADf,EACeA,OAAQa,EADvB,EACuBA,KAAM8Q,EAD7B,EAC6BA,eAEjCpM,EAAYlF,EArHD,IACC,EAqHZqF,EAAaiM,EACb3R,EArHW,GACG,EAqHdA,EACAM,EAAOmQ,EAAS,GAChBlQ,EAAOkQ,EAAS,GAIdjM,EAAS,CACboN,oBAAqB,CACnB9M,SAAU,WACVC,IAAK,EACLC,KAlIW,IAmIXhF,OAAQA,EACRK,MAAO,GACPwR,QAAS,EACTC,gBACE,mEAEJC,iBAAkB,CAChBjN,SAAU,WAEVT,OAAQ,EACRW,KAAMgN,UASV,OALAtB,EAAenO,KAAK0P,qBAAqBpR,GAEzCA,EAAO0B,KAAK2P,iBAAiBxB,EAAc7P,GAC3CA,EAAO0B,KAAK0P,qBAAqBpR,GAG/B,kBAAC,EAAD,CACER,MAAOA,EACPL,OAAQA,EACRsF,UA1JW,IA2JXC,UAAWA,EACXC,WA3JY,EA4JZC,UAAWkM,EA3JA,GA2J8B,EACzCjM,WAAYA,EACZC,aAAc,GAId,kBAAC,EAAD,KACGgM,EACC,kBAAC,EAAD,CACErR,KAAMmQ,EAAS,GACflQ,KAAMkQ,EAAS,GACfzQ,OAtKK,GAuKLK,MAzKK,MA2KL,MAGN,kBAAC,EAAD,KACGsR,EACC,6BACE,yBACEvN,MAAO,CACL/D,MAAOkF,EACPvF,OAlLC,GAmLD4E,gBAAiB,aAGrB,kBAAC,YAAD,CACEtE,KAAMA,EACNC,KAAMA,EACNP,OAzLG,GA0LHK,MAAOkF,EACP4M,aAAa,SACbjN,SAAU,GACVD,WAAY,IACZ4B,YAAY,mBACZ2I,UAAW,EACX4C,UAAU,KAGZ,MAGN,kBAAC,EAAD,MAGA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEzN,WA7MO,IA8MPD,YAAagB,IAEf,yBAAKtB,MAAOI,EAAOuN,kBACjB,kBAAC,EAAD,CACE/Q,QArFG,GAsFHC,QAASyE,EACTzF,KAzFC,GA0FDC,KAzFC,GA0FDiQ,mBAAoB5N,KAAK4N,mBACzBzB,QAAS,CACPC,KAAM,CACJ0D,gBAAgB,EAChBC,gBAAgB,EAChB7D,kBAAmB,GACnB8D,aAAc,GAEhBC,YAAa,CACXC,QAAS,SASnB,kBAAC,EAAD,KAEE,kBAAC,EAAD,CACEpS,MAAOkF,EACPvF,OAAQ0F,EACRpF,KAAMmQ,EAAS,GACflQ,KAAMkQ,EAAS,GACfxQ,KApHG,GAqHHC,KApHG,GAqHHW,KAAMA,KAYV,kBAAC,EAAD,MAGA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,yBAAKuD,MAAOI,EAAOoN,2B,GAjQGtN,kB,QCjBxBoO,E,YACF,WAAYhS,GAAQ,IAAD,8BACf,4CAAMA,KAoDViS,aAAe,SAAC1C,GACRA,GAAGA,EAAEvF,iBACT,IACIkI,EADS,EAAK/R,KAAKgS,MACJC,QAAQ,mBAAmB,SAAUC,GACpD,MAAO,IAAMA,EAAEC,UAAU,EAAGD,EAAE5B,OAAS,GAAK,QAG5C8B,EAAOC,KAAKC,MAAMP,GACR,EAAK/G,MAAMhL,KACjB0O,KAAK0D,GACb,EAAK1G,SAAS,CACV1L,KAAK,GAAD,mBAAM,EAAKgL,MAAMhL,MAAjB,CAAuBoS,OA7D/B,EAAKG,oBAAsB,CACvBC,KAAM,UACNC,QAAS,UACTC,IAAK,UACLC,MAAO,UACPC,SAAU,UACVC,SAAU,WAGd,EAAK7H,MAAQ,CACThL,KAAM8S,EACNlD,SAAU,CAAC,WAAe,YAC1BpQ,MAAO,KACPL,OAAQ,KAGZ,EAAK4T,KAAO,CAAC,OAAQ,UAAW,QAAS,OAEzC,EAAKC,qBAAuB,EAAKA,qBAAqBzK,KAA1B,gBArBb,E,iFAyBf,IAAI0K,EAAOvR,KACPwR,GAAY,EAChBC,aAAY,WACRF,EAAKG,mBAAmBF,GACxBA,GAAY,IACb,O,6CAIH,IAAIlT,EAAO0B,KAAKsJ,MAAMhL,KACtBA,EAAOA,EAAKqT,MAAM,GAAI,GACtB3R,KAAKgK,SAAL,eACOhK,KAAKsJ,MADZ,CAEIhL,KAAM,CACF,CAAEsT,KAAM,2BAA4BtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,GAC7E,CAAEsB,KAAM,iBAAkBtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBACnE,CAAEsB,KAAM,eAAgBtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBACjE,CAAEsB,KAAM,2BAA4BtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBAC7E,CAAEsB,KAAM,yBAA0BtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBAC3E,CAAEsB,KAAM,2BAA4BtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBAC7E,CAAEsB,KAAM,iBAAkBtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBACnE,CAAEsB,KAAM,eAAgBtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBACjE,CAAEsB,KAAM,2BAA4BtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,oBAC7E,CAAEsB,KAAM,yBAA0BtD,KAAM,WAAYuD,KAAM,SAAUvB,MAAO,0B,yCAoBpEkB,GACf,IAAIM,EAEAA,EAAc9R,KAAKsJ,MAAMhL,KAAK0B,KAAKsJ,MAAMhL,KAAKsQ,OAAS,GAAzC,KAAuD,MAKzE,IAAImD,EAAU,CACVC,KAAOtS,KAAK0N,MAAsB,GAAhB1N,KAAKuS,UAAiB,GACxC3D,KAAMwD,GAGNI,EAAUlS,KAAKsJ,MAAMhL,KAEzB4T,EAAQlF,KAAK+E,GAEb/R,KAAKgK,SAAL,eACOhK,KAAKsJ,MADZ,CAEIhL,KAAK,GAAD,mBAAM4T,GAAN,CAAeH,IACnB7D,SAAU,CAA8B,IAA7BlO,KAAKsJ,MAAMhL,KAAK,GAAhB,KAAgD,IAAbwT,EAAoB,UAEtEK,QAAQC,IAAIpS,KAAKsJ,MAAMhL,Q,+BAGjB,IAAD,SACmC0B,KAAKsJ,MAAvChL,EADD,EACCA,KAAM4P,EADP,EACOA,SAAUpQ,EADjB,EACiBA,MAAOL,EADxB,EACwBA,OAC7B,OACI,oCACI,0DAAgC,gCAChC,0BAAM4U,SAAUrS,KAAKoQ,cACjB,2BAAOvO,MAAO,CACVpE,OAAQ,OACRK,MAAO,MACP6E,SAAU,QACX2P,YAAY,OAAOT,KAAK,OAAOjQ,IAAK,SAAC2Q,GAAc,EAAKjU,KAAOiU,KAClE,6CAEJ,4BAAQC,QAASxS,KAAKsR,sBAAtB,eACA,kBAAC,EAAD,CACIhT,KAAMA,EACN4P,SAAUA,EACVpQ,MAAOA,EACPL,OAAQA,EACR2R,gBAAgB,S,GAjHlB1L,aAuHlB+O,IAASlH,OAAO,kBAAC,EAAD,MAASlK,SAASqR,eAAe,U","file":"static/js/main.247b07df.chunk.js","sourcesContent":["//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import React, { PureComponent } from \"react\";\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n} from \"./PlottingUtils\"\n\nclass TempChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.tempChartCanvas = this.refs.tempChartCanvas\n        this.tempChartCtx = this.tempChartCanvas.getContext(\"2d\")\n        this.drawTempChart(this.tempChartCtx)\n\n        this.grd = this.tempChartCtx.createLinearGradient(0, 0, 0, this.canvasH);\n        this.grd.addColorStop(0.168, 'rgba(255, 86, 86, 1.000)');\n        this.grd.addColorStop(0.304, 'rgba(170, 255, 170, 1.000)');\n        this.grd.addColorStop(0.452, 'rgba(86, 170, 255, 1.000)');\n    }\n\n    componentDidUpdate() {\n        this.drawTempChart(this.tempChartCtx)\n    }\n\n    roundRect(ctx, x0, y0, x1, y1, r, color) {\n        var w = x1 - x0;\n        var h = y1 - y0;\n        if (r > w / 2) r = w / 2;\n        if (r > h / 2) r = h / 2;\n        ctx.beginPath();\n        ctx.moveTo(x1 - r, y0);\n        ctx.quadraticCurveTo(x1, y0, x1, y0 + r);\n        ctx.lineTo(x1, y1 - r);\n        ctx.quadraticCurveTo(x1, y1, x1 - r, y1);\n        ctx.lineTo(x0 + r, y1);\n        ctx.quadraticCurveTo(x0, y1, x0, y1 - r);\n        ctx.lineTo(x0, y0 + r);\n        ctx.quadraticCurveTo(x0, y0, x0 + r, y0);\n        ctx.closePath();\n        ctx.fillStyle = color;\n        ctx.fill();\n    }\n\n    drawTempChart = (ctx) => {\n        let { minX, maxX, minY, maxY, data } = this.props\n        let fromBackgroundFillData = 40\n\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH)\n\n        for (let i = 0; i < 5; i++) {\n            let fillStyle\n            if (fromBackgroundFillData % 10 !== 0) {\n                fillStyle = 'white'\n            } else {\n                fillStyle = '#fff3e4'\n            }\n            ctx.beginPath()\n            ctx.fillStyle = fillStyle\n            let fromBackGroundDomY = toDomYCoord_Linear(this.canvasH, minY, maxY, fromBackgroundFillData)\n            let toBackGroundDomY = toDomYCoord_Linear(this.canvasH, minY, maxY, fromBackgroundFillData - 5)\n            ctx.rect(0, fromBackGroundDomY, this.canvasW, toBackGroundDomY - fromBackGroundDomY)\n            fromBackgroundFillData -= 5\n            ctx.fill()\n        }\n\n        data.map(d => {\n            let domY, domX = toDomXCoord_Linear(this.canvasW, minX / 1000, maxX / 1000, d[\"time\"])\n\n            ctx.beginPath()\n\n            let circle\n            if (d[\"temp\"] instanceof Array) {\n                let minDomY = toDomYCoord_Linear(this.canvasH, minY, maxY, d[\"temp\"][0])\n                let maxDomY = toDomYCoord_Linear(this.canvasH, minY, maxY, d[\"temp\"][1])\n                let diff = Math.abs(maxDomY - minDomY)\n\n                if (diff < 9) {\n                    this.roundRect(ctx, domX - 4, maxDomY - 4, domX + 4, minDomY + 4, 20, this.grd)\n                } else {\n                    this.roundRect(ctx, domX - 4, maxDomY, domX + 4, minDomY, 20, this.grd)\n                }\n\n            } else {\n                domY = toDomYCoord_Linear(this.canvasH, minY, maxY, d[\"temp\"])\n\n                if (d[\"temp\"] < 35) {\n                    circle = this.getCircle(\"black\");\n                } else if (d[\"temp\"] > 37) {\n                    circle = this.getCircle(\"red\");\n                } else {\n                    circle = this.getCircle(\"green\");\n                }\n\n                ctx.drawImage(circle, domX - circle.width / 2, domY - circle.height / 2);\n            }\n        })\n    }\n\n    getCircle(color) {\n        if (color === \"green\") {\n            if (!this.greenCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#4cb447'\n                ctx.fill();\n                this.greenCircle = canvas;\n            }\n            return this.greenCircle;\n        } else if (color === \"black\") {\n            if (!this.blackCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#727272'\n                ctx.fill();\n                this.blackCircle = canvas;\n            }\n            return this.blackCircle;\n        } else {\n            if (!this.redCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#cc7766'\n                ctx.fill();\n                this.redCircle = canvas;\n            }\n            return this.redCircle;\n        }\n    }\n\n    render() {\n        const styles = {\n            tempChartCanvas: { zIndex: -1 }\n        }\n        return (\n            <canvas\n                className=\"temp-chart-canvas\"\n                ref=\"tempChartCanvas\"\n                width={this.canvasW}\n                height={this.canvasH}\n                style={styles.tempChartCanvas}\n            />\n        )\n    }\n}\n\nexport default TempChart","import React, { PureComponent } from \"react\";\n\nclass TempChartLeftPanel extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n    }\n\n    render() {\n        let { panelHeight, panelWidth } = this.props\n        const styles = {\n            tempChartLeftPanel: {\n                height: panelHeight + \"px\",\n                width: panelWidth + \"px\",\n                backgroundColor: \"#fffcec\"\n            },\n            tempChartLabel: {\n                position: \"absolute\",\n                top: \"45%\",\n                left: \"10%\",\n                color: '#373c62',\n                fontWeight: '800',\n                fontSize: \"11pt\"\n            }\n        }\n        return (\n            <div className=\"temp-chart-left-panel\"\n                style={styles.tempChartLeftPanel}>\n                <div className=\"temp-chart-label\"\n                    style={styles.tempChartLabel}> Temperature ({\"\\u00B0\"}C) </div>\n            </div>\n        )\n    }\n}\n\nexport default TempChartLeftPanel","import React, { PureComponent } from \"react\";\n\nclass TempChartYAxis extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.canvasW\n        this.canvasH = this.props.canvasH\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n    }\n\n    componentDidMount() {\n        this.tempChartYAxisCanvas = this.refs.tempChartYAxisCanvas\n        this.tempChartYAxisCtx = this.tempChartYAxisCanvas.getContext(\"2d\")\n        this.drawYAxis(this.tempChartYAxisCtx);\n    }\n\n    componentDidUpdate() {\n        this.minY = this.props.minY\n        this.maxY = this.props.maxY\n        this.drawYAxis(this.tempChartYAxisCtx);\n    }\n\n    toDomYCoord_Linear = (height, minY, maxY, dataY) => {\n        return height - (dataY - minY) / ((maxY - minY) / height);\n    }\n\n    drawYAxis = (ctx) => {\n        let labels = [20, 30, 40]\n        // clear canvas\n        ctx.canvas.width = ctx.canvas.width\n\n        // draw the y-axis line\n        ctx.lineWidth = 3\n        ctx.moveTo(this.canvasW, 5)\n        ctx.lineTo(this.canvasW, this.canvasH - 5)\n        ctx.stroke()\n\n        // label styling\n        ctx.font = \"600 14px MuseoSans Sans\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = '#373c62'\n\n        for (let i = 0; i < labels.length; i++) {\n            let posDomY = this.toDomYCoord_Linear(this.canvasH, 18, 43, labels[i])\n            // ctx.moveTo(this.canvasW - 10, posDomY)\n            // ctx.lineTo(this.canvasW, posDomY)\n            ctx.fillText(labels[i], this.canvasW - 25, posDomY)\n        }\n        ctx.stroke()\n    }\n\n    roundToNearestTenth(n) {\n        return (parseInt(n / 10, 10) + 1) * 10;\n    }\n\n    render() {\n        return (\n            <canvas\n                className=\"temp-chart-y-axis\"\n                ref=\"tempChartYAxisCanvas\"\n                style={{ position: \"absolute\" }}\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n\n        )\n    }\n}\n\nexport default TempChartYAxis","import React, { PureComponent } from \"react\";\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n    fromDomXCoord_Linear\n} from \"./PlottingUtils\"\n\nclass TempChartRedLine extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.redLineCanvas = this.refs.redLineCanvas\n        this.redLineCtx = this.redLineCanvas.getContext(\"2d\")\n        this.drawRedLine(this.redLineCtx)\n    }\n\n    componentDidUpdate() {\n        this.drawRedLine(this.redLineCtx)\n    }\n\n    drawRedLine = (ctx) => {\n        // clear canvas\n        ctx.canvas.width = ctx.canvas.width\n\n        let { time, minX, maxX } = this.props\n        let domX = toDomXCoord_Linear(this.canvasW, minX / 1000, maxX / 1000, time)\n        ctx.strokeStyle = 'red'\n        // draw the red line\n        ctx.lineWidth = 5\n        ctx.moveTo(domX, 5)\n        ctx.lineTo(domX, this.canvasH - 5)\n        ctx.stroke()\n    }\n\n    render() {\n        // let minXInSecs = minX / 1000, maxXInSecs = maxX / 1000\n        return (\n            <canvas\n                className=\"redline-canvas\"\n                ref=\"redLineCanvas\"\n                width={this.canvasW}\n                height={this.canvasH}\n            />\n        )\n    }\n}\n\nexport default TempChartRedLine","import React, {Component} from \"react\";\nimport {memoize_one} from \"memoize\";\nimport \"./PlotContainers.css\";\n\nexport class PlotContainer extends Component{\n  render(){\n    let { children,width,height,\n          leftWidth,plotWidth,rightWidth,\n          topHeight,plotHeight,bottomHeight} = this.props;\n    let style = this.generateGridLayoutStyle( width,height,\n                                              leftWidth,plotWidth,rightWidth,\n                                              topHeight,plotHeight,bottomHeight);\n    return (\n      <div style={style} className=\"PlotContainers-positionRelative\">\n        {children}\n      </div>\n    )\n  }\n  \n  generateGridLayoutStyle = memoize_one((width,height,\n                          leftWidth,plotWidth,rightWidth,\n                          topHeight,plotHeight,bottomHeight)=>{\n    let style = { display:\"grid\",\n                  height:height,\n                  width:width,\n                  gridGap:0,\n                  gridTemplateColumns:`${leftWidth}px ${plotWidth}px ${rightWidth}px`,\n                  gridTemplateRows:`${topHeight}px ${plotHeight}px ${bottomHeight}px`\n                  };\n    return style;\n  })\n}\n\nexport const PlotSubContainer = (props)=>{\n  return (\n    <div className=\"PlotContainers-positionRelative\">\n      { props.children ? \n        React.Children.map(props.children,(child)=>\n          <div className=\"PlotContainers-positionAbsolute\">\n            {child}\n          </div>) :\n        null\n        }\n    </div>\n  );\n}\n\n","import React, {PureComponent} from \"react\";\nimport {format} from \"date-fns\";\nimport {createPrimaryCategoryBitmap,createSecondaryCategoryBitmap,\n        drawPrimaryCategory,drawSecondaryCategory} from \"./Modules/YAxisTwoLevelPanelPlotters\";\n\nconst PRIMARY_CATEGORY_COLOR = \"#61605F\";\nconst SECONDARY_CATEGORY_COLOR = \"#fedda7\";\n\nclass DynamicDateYAxisTwoLevelPanel extends PureComponent {\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n    this.secondaryBitmap = document.createElement(\"canvas\");\n    this.primaryBitmap = createPrimaryCategoryBitmap(\"\");\n  }\n  \n  render(){\n    let { height,width,} = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} style={{display:\"block\",height:height,width:width}}></canvas>\n    );\n  }\n  \n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate(){\n    this.draw();\n  }\n\n  draw(){\n    let { minX,maxX,\n          height,width} = this.props;\n    let canvas = this.ref.current;\n    let {secondaryBitmap,primaryBitmap} = this;\n    // Label\n    let label = this.createLabel(minX,maxX);\n    secondaryBitmap = createSecondaryCategoryBitmap(label,secondaryBitmap);\n    // Plot\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    drawPrimaryCategory(ctx,width,height,primaryBitmap,PRIMARY_CATEGORY_COLOR,0,height);\n    drawSecondaryCategory(ctx,width,height,secondaryBitmap,SECONDARY_CATEGORY_COLOR,0,height);\n  }\n\n  createLabel(minX,maxX) {\n    let minT = new Date(minX);\n    let maxT = new Date(maxX);\n    if (minT.getFullYear()===maxT.getFullYear()) {\n      if (minT.getMonth()===maxT.getMonth()) {\n        if (minT.getDate()===maxT.getDate()) {\n          if (minT.getHours()===maxT.getHours()) {\n            if (minT.getMinutes()===maxT.getMinutes()) {\n              if (minT.getSeconds()===maxT.getSeconds()) {\n                return format(minT,\"YYYY/MMM/Do HH:mm:ss\")\n              }\n              return format(minT,\"YYYY/MMM/Do HH:mm\")\n            }\n            return format(minT,\"YYYY/MMM/Do HH\")\n          }\n          return format(minT,\"YYYY/MMM/Do\")\n        }\n        return format(minT,\"YYYY/MMM\")\n      }\n      return format(minT,\"YYYY\")\n    }\n    return \"Time\";\n  }\n}\n\nexport default DynamicDateYAxisTwoLevelPanel;\n","import {getRotatedAxisCoordinate} from \"plot-utils\";\nconst PRIMARY_PANEL_WIDTH = 30;\n\nexport function createPrimaryCategoryBitmap(text, canvas) {\n  let font = \"bold 18px Sans\";\n  let fillStyle = \"white\";\n  let strokeStyle = \"#878787\";\n  canvas = canvas || document.createElement(\"canvas\");\n  let ctx = canvas.getContext(\"2d\");\n  ctx.font = font;\n  let width = 18;\n  let height = ctx.measureText(text).width;\n  canvas.width = width;\n  canvas.height = height;\n  ctx.font = font;\n  ctx.fillStyle = fillStyle;\n  ctx.strokeStyle = strokeStyle;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.rotate(-Math.PI/2);\n  let {x,y} = getRotatedAxisCoordinate(width/2,height/2,-Math.PI/2);\n  ctx.fillText(text,x,y);\n  ctx.strokeText(text,x,y);\n  return canvas;\n}\n  \nexport function createSecondaryCategoryBitmap(text, canvas) {\n  let font = \"bold 12px Sans\";\n  let fillStyle = \"black\";\n  canvas = canvas || document.createElement(\"canvas\");\n  let ctx = canvas.getContext(\"2d\");\n  ctx.font = font;\n  let width = ctx.measureText(text).width;\n  let height = 14;\n  canvas.width = width;\n  canvas.height = height;\n  ctx.font = font;\n  ctx.fillStyle = fillStyle;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.fillText(text,width/2,height/2);\n  return canvas;\n}\n\nexport function drawPrimaryCategory(ctx,width,height,labelBitmap,bgColor,startDomX,endDomX){\n  let plotWidth = PRIMARY_PANEL_WIDTH;\n  let start = Math.round(startDomX);\n  let end = Math.round(endDomX);\n  let color = bgColor;\n  let bitmap = labelBitmap;\n  let plotHeight = end-start;\n  ctx.fillStyle = color;\n  ctx.fillRect(0,start,plotWidth,height);\n  if (bitmap.width!==0 &&\n      bitmap.height!==0) {\n    let srcx = Math.round(bitmap.width/2-plotWidth/2);\n    let srcy = Math.round(bitmap.height/2-plotHeight/2);\n    ctx.drawImage(bitmap,srcx,srcy,plotWidth,plotHeight,\n                         0,start,plotWidth,plotHeight);\n  }\n}\n\nexport function drawPrimaryCategories(ctx,width,height,labelBitmaps,bgColors,startDomXs,endDomXs){\n  let plotWidth = PRIMARY_PANEL_WIDTH;\n  for (let i=0; i<labelBitmaps.length; i++) {\n    let start = Math.round(startDomXs[i]);\n    let end = Math.round(endDomXs[i]);\n    let color = bgColors[i];\n    let bitmap = labelBitmaps[i];\n    let plotHeight = end-start;\n    ctx.fillStyle = color;\n    ctx.fillRect(0,start,plotWidth,plotHeight);\n    if (bitmap.width!==0 &&\n        bitmap.height!==0) {\n      let srcx = Math.round(bitmap.width/2-plotWidth/2);\n      let srcy = Math.round(bitmap.height/2-plotHeight/2);\n      ctx.drawImage(bitmap,srcx,srcy,plotWidth,plotHeight,\n                           0,start,plotWidth,plotHeight);\n    }\n  }\n}\n\nexport function drawSecondaryCategory(ctx,width,height,labelBitmap,bgColor,startDomX,endDomX){\n  if (labelBitmap.width===0 ||\n      labelBitmap.height===0 ||\n      labelBitmap.height > height) {\n    return;\n  }\n  let plotWidth = width - PRIMARY_PANEL_WIDTH;\n  let xOffset = PRIMARY_PANEL_WIDTH;\n  let start = Math.round(startDomX);\n  let end = Math.round(endDomX);\n  let plotHeight = end-start;\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(xOffset,start,plotWidth,plotHeight);\n  let srcx = 0;\n  let srcy = Math.round(labelBitmap.height/2-plotHeight/2);\n  ctx.drawImage(labelBitmap,srcx,srcy,plotWidth,plotHeight,\n                       xOffset+5,start,plotWidth,plotHeight);\n}\n\n\nexport function drawSecondaryCategories(ctx,width,height,labelBitmaps,bgColors,startDomXs,endDomXs){\n  let plotWidth = width - PRIMARY_PANEL_WIDTH;\n  let xOffset = PRIMARY_PANEL_WIDTH;\n  for (let i=0; i<labelBitmaps.length; i++) {\n    let start = Math.round(startDomXs[i]);\n    let end = Math.round(endDomXs[i]);\n    let color = bgColors[i];\n    let bitmap = labelBitmaps[i];\n    let plotHeight = end-start;\n    ctx.fillStyle = color;\n    ctx.fillRect(xOffset,start,plotWidth,plotHeight);\n    if (bitmap.width!==0 &&\n        bitmap.height!==0) {\n      let srcx = 0\n      let srcy = Math.round(bitmap.height/2-plotHeight/2);\n      ctx.drawImage(bitmap,srcx,srcy,plotWidth,plotHeight,\n                           xOffset+5,start,plotWidth,plotHeight);\n    }\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n// CSS\nimport \"./DragOverlay.css\";\n\nclass DragOverlay extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n  }\n\n  render() {\n    let { cursor } = this.props;\n    return <div className=\"fullscreen\" style={{ cursor: cursor }}></div>;\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousemove\", this.handleMouseMove, true);\n    document.addEventListener(\"mouseup\", this.handleMouseUp, true);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousemove\", this.handleMouseMove, true);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp, true);\n  }\n\n  handleMouseMove(ev) {\n    ev.stopPropagation();\n    let { mouseMoveHandler } = this.props;\n    mouseMoveHandler(ev);\n  }\n\n  handleMouseUp(ev) {\n    ev.stopPropagation();\n    let { mouseUpHandler } = this.props;\n    mouseUpHandler(ev);\n  }\n}\n\nDragOverlay.propTypes = {\n  cursor: PropTypes.string.isRequired,\n  mouseMoveHandler: PropTypes.func.isRequired,\n  mouseUpHandler: PropTypes.func.isRequired\n};\n\nexport default DragOverlay;\n","import {PureComponent} from \"react\"\n\nclass CountDown extends PureComponent{\n  render(){\n    return null\n  }\n  \n  componentDidMount(){\n    let {timeout,callback} = this.props\n    this.timeout = setTimeout(callback,timeout)\n  }\n\n  componentDidUpdate(){\n    clearTimeout(this.timeout)\n    let {timeout,callback} = this.props\n    this.timeout = setTimeout(callback,timeout)\n  }\n\n  componentWillUnmount(){\n    clearTimeout(this.timeout)\n  }\n}\n\nexport default CountDown\n","import React, { PureComponent } from \"react\";\n// Components\nimport DragOverlay from \"./DragOverlay\";\nimport CountDown from \"./CountDown\";\n\n// CSS\nimport \"./PlotInteractionBox.css\";\n\nexport const MODE_HOVERING = \"hovering\";\nexport const MODE_CLICKING = \"clicking\";\nexport const MODE_AUTOSELECTING = \"autoSelecting\";\nexport const MODE_SELECTING = \"selecting\";\nexport const MODE_PANNING = \"panning\";\n\nexport const ACTION_MOUSEDOWN = \"mouseDown\";\nexport const ACTION_MOUSEMOVE = \"mouseMove\";\nexport const ACTION_MOUSEUP = \"mouseUp\";\nexport const ACTION_TIMEOUT = \"timeout\";\n\nexport const INTERACTION_MODEL_DEFAULT = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: {\n    [ACTION_TIMEOUT]: MODE_AUTOSELECTING,\n    [ACTION_MOUSEMOVE]: MODE_SELECTING,\n    [ACTION_MOUSEUP]: MODE_HOVERING\n  },\n  [MODE_AUTOSELECTING]: {\n    [ACTION_TIMEOUT]: MODE_PANNING,\n    [ACTION_MOUSEMOVE]: MODE_SELECTING\n  },\n  [MODE_SELECTING]: { [ACTION_MOUSEUP]: MODE_HOVERING },\n  [MODE_PANNING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nexport const INTERACTION_MODEL_SELECTING = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: {\n    [ACTION_TIMEOUT]: MODE_SELECTING,\n    [ACTION_MOUSEMOVE]: MODE_SELECTING,\n    [ACTION_MOUSEUP]: MODE_HOVERING\n  },\n  [MODE_SELECTING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nexport const INTERACTION_MODEL_PANNING = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: {\n    [ACTION_TIMEOUT]: MODE_PANNING,\n    [ACTION_MOUSEMOVE]: MODE_PANNING,\n    [ACTION_MOUSEUP]: MODE_HOVERING\n  },\n  [MODE_PANNING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nexport const INTERACTION_MODEL_BARE = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nclass PlotInteractionBox extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { mode: MODE_HOVERING };\n    this.ref = React.createRef();\n    this.initialMouseDownPosition = null;\n    this.prevClickTimeStamp = null;\n    this.handleMouseMove_Panning = this.handleMouseMove_Panning.bind(this);\n    this.handleMouseUp_Panning = this.handleMouseUp_Panning.bind(this);\n  }\n\n  render() {\n    let { width, height, children } = this.props;\n    let style = { width, height };\n\n    switch (this.state.mode) {\n      case MODE_HOVERING:\n        return (\n          <div>\n            <div\n              ref={this.ref}\n              style={style}\n              onMouseMove={this.handleMouseMove_Hovering}\n              onMouseOut={this.handleMouseOut_Hovering}\n              onMouseDown={this.handleMouseDown_Hovering}\n            >\n              {children}\n            </div>\n          </div>\n        );\n      case MODE_CLICKING:\n        return (\n          <div>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_Clicking}\n              mouseUpHandler={this.handleMouseUp_Clicking}\n              cursor=\"point\"\n            />\n            <CountDown timeout={200} callback={this.clickTimeout} />\n          </div>\n        );\n      case MODE_AUTOSELECTING:\n        return (\n          <div>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_AutoSelecting}\n              mouseUpHandler={this.handleMouseUp_AutoSelecting}\n              cursor=\"nesw-resize\"\n            />\n            <CountDown timeout={500} callback={this.autoSelectingTimeout} />\n          </div>\n        );\n      case MODE_SELECTING:\n        return (\n          <div>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_Selecting}\n              mouseUpHandler={this.handleMouseUp_Selecting}\n              cursor=\"nesw-resize\"\n            />\n          </div>\n        );\n      case MODE_PANNING:\n        return (\n          <div>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_Panning}\n              mouseUpHandler={this.handleMouseUp_Panning}\n              cursor=\"grabbing\"\n            />\n          </div>\n        );\n      default:\n        return <p>{this.state.mode}</p>;\n      //throw new Error(\"ProgrammerTooDumbError\");\n    }\n  }\n\n  transition(action) {\n    let { transitionGraph } = this.props;\n    let { mode } = this.state;\n    let nextMode = transitionGraph[mode][action];\n    if (nextMode) {\n      this.setState({ mode: nextMode });\n    }\n  }\n\n  getCustomEventObject(ev) {\n    let { left, top } = this.ref.current.getBoundingClientRect();\n    let { clientX, clientY } = ev;\n    let domX = clientX - left;\n    let domY = clientY - top;\n    return { domX, domY, clientX, clientY };\n  }\n\n  handleMouseMove_Hovering = ev => {\n    let { hoveringHandler } = this.props;\n    let myEV = this.getCustomEventObject(ev);\n    hoveringHandler(myEV);\n  };\n\n  handleMouseOut_Hovering = ev => {\n    let { hoverEndHandler } = this.props;\n    hoverEndHandler();\n  };\n\n  handleMouseDown_Hovering = ev => {\n    let { hoverEndHandler } = this.props;\n    ev.preventDefault();\n    let myEV = this.getCustomEventObject(ev);\n    this.initialMouseDownPosition = myEV;\n    hoverEndHandler();\n    this.transition(ACTION_MOUSEDOWN);\n  };\n\n  clickTimeout = () => {\n    this.transition(ACTION_TIMEOUT);\n  };\n\n  autoSelectingTimeout = () => {\n    this.transition(ACTION_TIMEOUT);\n  };\n\n  handleMouseMove_Clicking = ev => {\n    let { selectingHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (\n      Math.abs(myEV.domX - initialMouseDownPosition.domX) < 10 ||\n      Math.abs(myEV.domY - initialMouseDownPosition.domX) < 10\n    ) {\n      return;\n    } else {\n      this.transition(ACTION_MOUSEMOVE);\n    }\n  };\n\n  handleMouseUp_Clicking = ev => {\n    let { clickHandler, doubleClickHandler } = this.props;\n    let { prevClickTimeStamp } = this;\n    let myEV = ev;\n    if (\n      prevClickTimeStamp === null ||\n      prevClickTimeStamp + 200 < ev.timeStamp\n    ) {\n      this.prevClickTimeStamp = ev.timeStamp;\n      clickHandler(myEV);\n    } else {\n      this.prevClickTimeStamp = null;\n      doubleClickHandler(myEV);\n    }\n    this.transition(ACTION_MOUSEUP);\n  };\n\n  handleMouseMove_AutoSelecting = ev => {\n    let { selectingHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (\n      Math.abs(myEV.domX - initialMouseDownPosition.domX) < 10 ||\n      Math.abs(myEV.domY - initialMouseDownPosition.domX) < 10\n    ) {\n      return;\n    } else {\n      selectingHandler({ start: initialMouseDownPosition, end: myEV });\n      this.transition(ACTION_MOUSEMOVE);\n    }\n  };\n\n  handleMouseUp_AutoSelecting = ev => {\n    this.transition(ACTION_MOUSEUP);\n  };\n\n  handleMouseMove_Selecting = ev => {\n    let { selectingHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    selectingHandler({ start: initialMouseDownPosition, end: myEV });\n  };\n\n  handleMouseUp_Selecting = ev => {\n    let { selectedHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    selectedHandler({ start: initialMouseDownPosition, end: myEV });\n    this.transition(ACTION_MOUSEUP);\n  };\n\n  handleMouseMove_Panning(ev) {\n    let { panningHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    panningHandler({ start: initialMouseDownPosition, end: myEV });\n  }\n\n  handleMouseUp_Panning(ev) {\n    let { pannedHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    pannedHandler({ start: initialMouseDownPosition, end: myEV });\n    this.transition(ACTION_MOUSEUP);\n  }\n}\n\nexport default PlotInteractionBox;\n","import React, { Component } from \"react\";\nimport PlotInteractionBox, {\n  INTERACTION_MODEL_PANNING\n} from \"./PlotInteractionBox\";\n\nclass PlotInteractionBoxProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoveringPosition: null,\n      clickPosition: null,\n      doubleClickPosition: null,\n      selectingPositions: null,\n      selectedPositions: null,\n      panningPositions: null,\n      pannedPositions: null\n    };\n    this.handlePanning = this.handlePanning.bind(this);\n    this.handlePanned = this.handlePanned.bind(this);\n  }\n\n  render() {\n    let { render, width, height } = this.props;\n    return (\n      <PlotInteractionBox\n        width={width}\n        height={height}\n        transitionGraph={INTERACTION_MODEL_PANNING}\n        hoveringHandler={this.handleHovering}\n        hoverEndHandler={this.handleHoverEnd}\n        clickHandler={this.handleClick}\n        doubleClickHandler={this.handleDoubleClick}\n        selectingHandler={this.handleSelecting}\n        selectedHandler={this.handleSelected}\n        panningHandler={this.handlePanning}\n        pannedHandler={this.handlePanned}\n      >\n        {render(this.state)}\n      </PlotInteractionBox>\n    );\n  }\n\n  handleHovering = hoveringPosition => {\n    this.setState({ ...this.state, hoveringPosition });\n    if (this.props.handleHoverPosChange) {\n      this.props.handleHoverPosChange(hoveringPosition);\n    }\n  };\n\n  handleHoverEnd = () => {\n    this.setState({ ...this.state, hoveringPosition: null });\n    if (this.props.handleHoverPosChange) {\n      this.props.handleHoverPosChange(null);\n    }\n  };\n\n  handleClick = clickPosition => {\n    this.setState({\n      ...this.state,\n      clickPosition\n    });\n    if (this.props.handleClick) {\n      this.props.handleClick(clickPosition);\n    }\n  };\n\n  handleDoubleClick = doubleClickPosition => {\n    this.setState({ ...this.state, doubleClickPosition });\n  };\n\n  handleSelecting = selectingPositions => {\n    this.setState({ ...this.state, selectingPositions });\n  };\n\n  handleSelected = selectedPositions => {\n    this.setState({\n      ...this.state,\n      selectedPositions,\n      selectingPositions: null\n    });\n  };\n\n  handlePanning(panningPositions) {\n    this.setState({ ...this.state, panningPositions });\n    if (this.props.handlePan) {\n      this.props.handlePan(panningPositions);\n    }\n  }\n\n  handlePanned(pannedPositions) {\n    this.setState({ ...this.state, pannedPositions, panningPositions: null });\n    if (this.props.handlePanned) {\n      this.props.handlePanned(pannedPositions);\n    }\n  }\n}\n\nexport default PlotInteractionBoxProvider;\n","import React, { PureComponent } from 'react'\nimport PlotInteractionBoxProvider from './PlotInteraction/PlotInteractionBoxProvider'\nimport { toDomYCoord_Linear, toDomXCoord_Linear } from './PlottingUtils'\n\nfunction round5 (x) {\n  return Math.round(Math.ceil(x / 5) * 5)\n}\n\nconst YAXIS_FONT_STYLE = {\n  size: 12,\n  color: 'black',\n  fontFamily: 'MuseoSans, sans-serif'\n}\n\nclass YAxis extends PureComponent {\n  constructor (props) {\n    super(props)\n    this.canvasW = this.props.canvasW\n    this.canvasH = this.props.canvasH\n    this.minY = this.props.minY\n    this.maxY = this.props.maxY\n    this.yAxisSkipInterval = 50\n    this.yAxisLabelTextCanvasCache = {}\n    this.handlePan = this.handlePan.bind(this)\n    this.handlePanned = this.handlePanned.bind(this)\n    this.prevPanDist = 0\n    this.dynamicMaxY = 0\n    this.initMaxY = this.props.maxY\n  }\n\n  componentDidMount () {\n    this.yAxisLabelPadding = this.props.configs.axis.yAxisLabelPadding\n    this.yAxisLabels = this.generateYAxisLabels(this.maxY * 100)\n    this.yAxisCanvas = this.refs.yAxisCanvas\n    this.yAxisCtx = this.yAxisCanvas.getContext('2d')\n    this.setUpCtx(this.yAxisCtx)\n    this.drawYAxis(\n      this.yAxisCtx,\n      this.getYAxisLabelSkipInterval(\n        this.minY,\n        this.maxY,\n        this.canvasH,\n        this.yAxisLabelPadding,\n        20\n      )\n    )\n  }\n\n  componentDidUpdate () {\n    this.yAxisLabelPadding = this.props.configs.axis.yAxisLabelPadding\n    this.minY = this.props.minY\n    this.maxY = this.props.maxY\n    this.drawYAxis(\n      this.yAxisCtx,\n      this.getYAxisLabelSkipInterval(\n        this.minY,\n        this.maxY,\n        this.canvasH,\n        this.yAxisLabelPadding,\n        20\n      )\n    )\n  }\n\n  toDomYCoord_Linear (height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height)\n  }\n\n  getYAxisLabelSkipInterval (\n    minY,\n    maxY,\n    height,\n    labelPadding = 20,\n    labelTextHeight\n  ) {\n    let numOfLabelsCanFit = Math.round(\n      height / (labelTextHeight + labelPadding)\n    )\n\n    return round5((maxY - minY) / numOfLabelsCanFit)\n  }\n\n  generateYAxisLabels (maxY) {\n    let yAxisLabels = []\n    let yAxisLabelInterval = 1\n\n    for (\n      let curYAxisLabel = 0;\n      curYAxisLabel < round5(maxY);\n      curYAxisLabel += yAxisLabelInterval\n    ) {\n      yAxisLabels.push(curYAxisLabel)\n    }\n\n    return yAxisLabels\n  }\n\n  setUpCtx (ctx) {\n    // y-axis vertical line styling\n    ctx.strokeStyle = 'black'\n    ctx.lineWidth = 2.5\n    // text styling\n    ctx.font =\n      '500 ' + YAXIS_FONT_STYLE.size + 'px ' + YAXIS_FONT_STYLE.fontFamily\n    ctx.lineWidth = 0.6\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = 'right'\n    ctx.fillStyle = 'gray'\n    this.textHeight = ctx.measureText('M').width\n  }\n\n  drawYAxis (ctx, yAxisLabelInterval) {\n    let yAxisHorizontalLineWidth = 5\n\n    // clear canvas\n    ctx.clearRect(0, 0, this.canvasW, this.canvasH)\n    ctx.beginPath()\n\n    // draw the y-axis vertical line\n    ctx.moveTo(this.canvasW, 5)\n    ctx.lineTo(this.canvasW, this.canvasH - 5)\n\n    // draw the positive labels and horizontal lines\n    for (let i = 0; i < this.maxY; i += yAxisLabelInterval) {\n      let domY = Math.floor(\n        this.toDomYCoord_Linear(\n          this.canvasH,\n          this.minY,\n          this.maxY,\n          this.yAxisLabels[i]\n        )\n      )\n      ctx.moveTo(this.canvasW - yAxisHorizontalLineWidth, domY)\n      ctx.lineTo(this.canvasW, domY)\n      ctx.drawImage(\n        this.getTextCanvas(this.yAxisLabels[i]),\n        0,\n        domY - this.textHeight / 2\n      )\n    }\n\n    if (this.minY < 0) {\n      for (let i = yAxisLabelInterval; i < this.maxY; i += yAxisLabelInterval) {\n        let domY = Math.floor(\n          this.toDomYCoord_Linear(\n            this.canvasH,\n            this.minY,\n            this.maxY,\n            -this.yAxisLabels[i]\n          )\n        )\n        ctx.moveTo(this.canvasW - yAxisHorizontalLineWidth, domY)\n        ctx.lineTo(this.canvasW, domY)\n        ctx.drawImage(\n          this.getTextCanvas(-this.yAxisLabels[i]),\n          0,\n          domY - this.textHeight / 2\n        )\n      }\n    }\n\n    ctx.stroke()\n  }\n\n  getTextCanvas (txt) {\n    let cachedLabelTextCanvas = this.yAxisLabelTextCanvasCache[txt]\n\n    if (cachedLabelTextCanvas === undefined) {\n      let canvas = document.createElement('canvas')\n      let ctx = canvas.getContext('2d')\n      canvas.width = this.canvasW\n      canvas.height = this.textHeight * 2\n\n      // text styling\n      ctx.font = YAXIS_FONT_STYLE.size + 'px ' + YAXIS_FONT_STYLE.fontFamily\n      ctx.textBaseline = 'top'\n      ctx.textAlign = 'right'\n      ctx.fillStyle = YAXIS_FONT_STYLE.color\n      ctx.fillText(txt, this.canvasW - 7, 0)\n      cachedLabelTextCanvas = canvas\n      this.yAxisLabelTextCanvasCache[txt] = canvas\n    }\n\n    return cachedLabelTextCanvas\n  }\n\n  handlePan (e) {\n    // if (this.maxY + (e.end.domY - e.start.domY - this.prevPanDist) <= this.initMaxY) {\n    let newMaxY = this.maxY + (e.end.domY - e.start.domY - this.prevPanDist)\n    // update min/max y callback\n    this.props.updateVisbleYRange([-newMaxY, newMaxY])\n    this.prevPanDist = e.end.domY - e.start.domY\n    // }\n  }\n\n  handlePanned () {\n    this.prevPanDist = 0\n  }\n\n  render () {\n    // width, height, data from props\n    // reserve className for parent\n    return (\n      <div>\n        <div\n          style={{\n            position: 'absolute'\n          }}\n        >\n          <canvas\n            className='plot-y-axis'\n            ref='yAxisCanvas'\n            width={this.canvasW}\n            height={this.canvasH}\n          />{' '}\n        </div>{' '}\n        <div\n          style={{\n            position: 'absolute',\n            cursor: 'ns-resize'\n          }}\n        >\n          <PlotInteractionBoxProvider\n            width={this.canvasW}\n            height={this.canvasH}\n            handlePan={this.handlePan}\n            handlePanned={this.handlePanned}\n            render={() => {}}\n          />{' '}\n        </div>{' '}\n      </div>\n    )\n  }\n}\n\nexport default YAxis\n","import TempChartBundle from \"./TempChartBundle\";\nexport default TempChartBundle;","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport TempChart from './TempChart'\nimport TempChartLeftPanel from './TempChartLeftPanel'\nimport TempChartYAxis from './TempChartYAxis'\nimport TempChartRedLine from './TempChartRedLine'\nimport {\n  PlotContainer,\n  PlotSubContainer\n} from './PlotContainers/PlotContainers'\nimport DynamicDateYAxisTwoLevelPanel from './DynamicDateYAxisTwoLevelPanel'\nimport { DateXAxis } from 'react-plot-axis'\nimport YAxis from './YAxis'\nimport './TempChart.css'\n\nconst minY = 0\nconst maxY = 200\nconst LEFT_WIDTH = 200\nconst RIGHT_WIDTH = 0\nconst TOP_HEIGHT = 40\nconst BOTTOM_HEIGHT = 0\n\nclass TempChartBundle extends PureComponent {\n  filterDataToDtWindow (data) {\n    let minX = this.props.dtWindow[0] / 1000\n    let maxX = this.props.dtWindow[1] / 1000\n    let filteredData = data\n\n    if (data) {\n      if (minX) {\n        // filter out the data that is within the dtWindow range\n        filteredData = filteredData.filter(function (o) {\n          return o.time <= maxX && o.time >= minX\n        })\n      }\n    }\n\n    return filteredData\n  }\n\n  extractTimeFromData (data) {\n    let timeArr = []\n    let timeSet = new Set()\n\n    data.map(d => {\n      if (!timeSet.has(d['time'])) {\n        timeArr.push(d['time'])\n        timeSet.add(d['time'])\n      }\n    })\n\n    return timeArr\n  }\n\n  tryToCombineData (filteredData, data) {\n    if (filteredData.length >= 48) {\n      if (filteredData.length >= 48 && filteredData.length < 96) {\n        data = this.combineData(2, data)\n      } else if (filteredData.length >= 96 && filteredData.length < 192) {\n        data = this.combineData(4, data)\n      } else if (filteredData.length >= 192 && filteredData.length < 384) {\n        data = this.combineData(8, data)\n      } else if (filteredData.length >= 384 && filteredData.length < 768) {\n        data = this.combineData(16, data)\n      } else if (filteredData.length >= 768 && filteredData.length < 1536) {\n        data = this.combineData(32, data)\n      } else if (filteredData.length >= 1536 && filteredData.length < 3072) {\n        data = this.combineData(64, data)\n      } else if (filteredData.length >= 3072 && filteredData.length < 6144) {\n        data = this.combineData(128, data)\n      } else if (filteredData.length >= 6144) {\n        data = this.combineData(256, data)\n      }\n    }\n    return data\n  }\n\n  combineData (combNum, data) {\n    let combinedData = [],\n      curCombinedObj,\n      curCombNum = 0,\n      curMinTemp = null,\n      curMaxTemp = null\n\n    data.map((d, i) => {\n      if (curCombNum === 0) {\n        curCombinedObj = { ...d }\n      }\n\n      if (!curMinTemp && !curMaxTemp) {\n        curMinTemp = d['temp']\n        curMaxTemp = d['temp']\n      } else if (d['temp'] < curMinTemp) {\n        curMinTemp = d['temp']\n      } else if (d['temp'] > curMaxTemp) {\n        curMaxTemp = d['temp']\n      }\n\n      curCombNum++\n\n      if (curCombNum >= combNum || i === data.length - 1) {\n        curCombNum = 0\n        curCombinedObj['temp'] = [curMinTemp, curMaxTemp]\n        combinedData.push(curCombinedObj)\n        curCombinedObj = {}\n        curMinTemp = null\n        curMaxTemp = null\n      }\n    })\n\n    return combinedData\n  }\n\n  // unix time in ms\n  getDaysBetweenDates = (d0, d1) => {\n    var msPerDay = 8.64e7\n\n    // Copy dates so don't mess them up\n    var x0 = new Date(d0)\n    var x1 = new Date(d1)\n\n    // Set to noon - avoid DST errors\n    x0.setHours(12, 0, 0)\n    x1.setHours(12, 0, 0)\n\n    // Round to remove daylight saving errors\n    return Math.round((x1 - x0) / msPerDay)\n  }\n\n  updateVisbleYRange = () => {}\n\n  render () {\n    let { dtWindow, width, height, data, isXAxisVisible } = this.props\n    let filteredData\n    let plotWidth = width - LEFT_WIDTH - RIGHT_WIDTH\n    let plotHeight = isXAxisVisible\n      ? height - TOP_HEIGHT - BOTTOM_HEIGHT\n      : height\n    let minX = dtWindow[0]\n    let maxX = dtWindow[1]\n    let minY = 18\n    let maxY = 43\n    let yAxisW = 50\n    const styles = {\n      leftPanelGradShadow: {\n        position: 'absolute',\n        top: 0,\n        left: LEFT_WIDTH,\n        height: height,\n        width: 15,\n        opacity: 1,\n        backgroundImage:\n          'linear-gradient(to right, rgba(0,0,0,0.3), rgba(255,255,255,0))'\n      },\n      yAxisWrappingDiv: {\n        position: 'absolute',\n        // top: dateAxisH + \"px\",\n        zIndex: 1,\n        left: LEFT_WIDTH - yAxisW + 'px'\n      }\n    }\n\n    filteredData = this.filterDataToDtWindow(data)\n    // combine unfiltered data to prevent jumpy movement\n    data = this.tryToCombineData(filteredData, data)\n    data = this.filterDataToDtWindow(data)\n\n    return (\n      <PlotContainer\n        width={width}\n        height={height}\n        leftWidth={LEFT_WIDTH}\n        plotWidth={plotWidth}\n        rightWidth={RIGHT_WIDTH}\n        topHeight={isXAxisVisible ? TOP_HEIGHT : 0}\n        plotHeight={plotHeight}\n        bottomHeight={0}\n      >\n        {/*Row TOP*/}\n        {/*Col LEFT*/}\n        <PlotSubContainer>\n          {isXAxisVisible ? (\n            <DynamicDateYAxisTwoLevelPanel\n              minX={dtWindow[0]}\n              maxX={dtWindow[1]}\n              height={TOP_HEIGHT}\n              width={LEFT_WIDTH}\n            />\n          ) : null}\n        </PlotSubContainer>\n        {/*Col PLOT*/}\n        <PlotSubContainer>\n          {isXAxisVisible ? (\n            <div>\n              <div\n                style={{\n                  width: plotWidth,\n                  height: TOP_HEIGHT,\n                  backgroundColor: '#feddaa'\n                }}\n              ></div>\n              <DateXAxis\n                minX={minX}\n                maxX={maxX}\n                height={TOP_HEIGHT}\n                width={plotWidth}\n                tickPosition='bottom'\n                fontSize={12}\n                fontWeight={400}\n                strokeStyle='rgba(0,0,0, 0.3)'\n                lineWidth={2}\n                isItalic={true}\n              />\n            </div>\n          ) : null}\n        </PlotSubContainer>\n        {/*Col RIGHT*/}\n        <PlotSubContainer></PlotSubContainer>\n        {/*Row PLOT*/}\n        {/*Col LEFT*/}\n        <PlotSubContainer>\n          <TempChartLeftPanel\n            panelWidth={LEFT_WIDTH}\n            panelHeight={plotHeight}\n          />\n          <div style={styles.yAxisWrappingDiv}>\n            <YAxis\n              canvasW={yAxisW}\n              canvasH={plotHeight}\n              minY={minY}\n              maxY={maxY}\n              updateVisbleYRange={this.updateVisbleYRange}\n              configs={{\n                axis: {\n                  isDynamicYAxis: true, // dynamic y axis = scale y axis according to current visible dataSets points\n                  isDynamicXAxis: true, // dynamic x axis = use x axis passed in by the plot user\n                  yAxisLabelPadding: 20,\n                  xAxisPadding: 0\n                },\n                plotStyling: {\n                  dotSize: 10\n                }\n              }}\n            />\n          </div>\n          {/* <TempChartYAxis canvasH={plotHeight} canvasW={LEFT_WIDTH} /> */}\n        </PlotSubContainer>\n        {/*Col PLOT*/}\n\n        <PlotSubContainer>\n          {/* Main plot area interaction */}\n          <TempChart\n            width={plotWidth}\n            height={plotHeight}\n            minX={dtWindow[0]}\n            maxX={dtWindow[1]}\n            minY={minY}\n            maxY={maxY}\n            data={data}\n          />\n          {/* <TempChartRedLine\n            width={plotWidth}\n            height={plotHeight}\n            minX={dtWindow[0]}\n            maxX={dtWindow[1]}\n            time={1509562800}\n          /> */}\n        </PlotSubContainer>\n\n        {/*Col RIGHT*/}\n        <PlotSubContainer></PlotSubContainer>\n        {/*Row BOTTOM*/}\n        {/*Col LEFT*/}\n        <PlotSubContainer></PlotSubContainer>\n        {/*Col PLOT*/}\n        <PlotSubContainer></PlotSubContainer>\n        {/*Col RIGHT*/}\n        <PlotSubContainer></PlotSubContainer>\n        {/*Other stuffs that ignore grid layut*/}\n        <div style={styles.leftPanelGradShadow}></div>\n      </PlotContainer>\n    )\n  }\n}\n\nTempChartBundle.propTypes = {\n  data: PropTypes.array.isRequired,\n  dtWindow: PropTypes.array.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n}\n\nexport default TempChartBundle\n","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport TempChartBundle from \"./lib\";\nimport tempData from \"./tempData.json\"\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.dataTypeToColorDict = {\n            MEDS: \"#C2EEF8\",\n            FLUSHES: \"#5DD2EF\",\n            TPN: \"#84A5D5\",\n            FEEDS: \"#A3DBDC\",\n            lol434ra: \"#C13BDA\",\n            xbo4334x: \"#613BFA\"\n        }\n\n        this.state = {\n            data: tempData,\n            dtWindow: [1482814800000, 1510117200000],\n            width: 1200,\n            height: 400\n        }\n\n        this.meds = [\"MEDS\", \"FLUSHES\", \"FEEDS\", \"TPN\"]\n\n        this.handleRemoveBtnCLick = this.handleRemoveBtnCLick.bind(this)\n    }\n\n    componentDidMount() {\n        let self = this\n        let firstTime = true\n        setInterval(function () {\n            self.simulateDataChange(firstTime)\n            firstTime = false\n        }, 1000)\n    }\n\n    handleRemoveBtnCLick() {\n        let data = this.state.data\n        data = data.slice(0, -1)\n        this.setState({\n            ...this.state,\n            data: [\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 1 },\n                { name: \"Blood Products\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293058, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293058, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Blood Products\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Urine Output\", time: 1456293060, type: \"Output\", value: 28.502415458937197 },\n                { name: \"Administered Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n                { name: \"Continuous Medications\", time: 1456293060, type: \"Intake\", value: 28.502415458937197 },\n            ],\n        })\n    }\n\n    handleSubmit = (e) => {\n        if (e) e.preventDefault()\n        const data = this.data.value\n        var jsonStr = data.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n            return '\"' + s.substring(0, s.length - 1) + '\":'\n        })\n\n        let json = JSON.parse(jsonStr)\n        let newData = this.state.data\n        newData.push(json)\n        this.setState({\n            data: [...this.state.data, json]\n        })\n    }\n\n    simulateDataChange(firstTime) {\n        let newMaxTime\n        if (firstTime) {\n            newMaxTime = (this.state.data[this.state.data.length - 1][\"time\"]) + 26400\n        } else {\n            newMaxTime = this.state.data[this.state.data.length - 1][\"time\"] + 26400\n        }\n\n        let newTemp = {\n            temp: (Math.floor(Math.random() * 20) + 20), \n            time: newMaxTime\n        }\n\n        let newData = this.state.data\n        // newData = newData.slice(2)\n        newData.push(newTemp)\n\n        this.setState({\n            ...this.state,\n            data: [...newData, newTemp],\n            dtWindow: [this.state.data[0][\"time\"] * 1000, newMaxTime * 1000 - 26400000]\n        })\n        console.log(this.state.data)\n    }\n\n    render() {\n        let { data, dtWindow, width, height } = this.state\n        return (\n            <>\n                <div>Pass in data in the form: {' { value: 1, type: \"MEDS\" } '}</div>\n                <form onSubmit={this.handleSubmit}>\n                    <input style={{\n                        height: \"50px\",\n                        width: \"50%\",\n                        fontSize: \"14pt\"\n                    }} placeholder=\"data\" type=\"text\" ref={(element) => { this.data = element }} />\n                    <button>ADD DATA</button>\n                </form>\n                <button onClick={this.handleRemoveBtnCLick}>REMOVE DATA</button>\n                <TempChartBundle\n                    data={data}\n                    dtWindow={dtWindow}\n                    width={width}\n                    height={height}\n                    isXAxisVisible={false} />\n            </>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}